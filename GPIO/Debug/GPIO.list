
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a78  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001c34  08001c34  00002c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c74  08001c74  00003014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c74  08001c74  00003014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c74  08001c74  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c74  08001c74  00002c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c78  08001c78  00002c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08001c7c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000014  08001c90  00003014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001c90  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051a3  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001382  00000000  00000000  000081e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00009570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045d  00000000  00000000  00009b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296b0  00000000  00000000  00009fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000678b  00000000  00000000  0003367d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ced  00000000  00000000  00039e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012caf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001604  00000000  00000000  0012cb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001c1c 	.word	0x08001c1c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08001c1c 	.word	0x08001c1c

080001fc <_ZN3LEDC1EP12GPIO_TypeDeft>:
#endif
#ifdef __cplusplus
}
#endif

LED::LED(GPIO_TypeDef * port, uint16_t pin) : GPIO_Port(port), GPIO_Pin(pin) {};
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	4613      	mov	r3, r2
 8000208:	80fb      	strh	r3, [r7, #6]
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	88fa      	ldrh	r2, [r7, #6]
 8000214:	809a      	strh	r2, [r3, #4]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	4618      	mov	r0, r3
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <_ZN3LED9turnLedOnEv>:

void LED::turnLedOn(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	889b      	ldrh	r3, [r3, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f000 fd30 	bl	8000c9c <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <_ZN3LED10turnLedOffEv>:

void LED::turnLedOff()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	889b      	ldrh	r3, [r3, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	4619      	mov	r1, r3
 8000258:	f000 fd20 	bl	8000c9c <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 f9da 	bl	8000622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f863 	bl	8000338 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8c3 	bl	80003fc <_ZL12MX_GPIO_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t led3Pin = GPIO_PIN_14;
 8000276:	2300      	movs	r3, #0
 8000278:	77fb      	strb	r3, [r7, #31]
  GPIO_TypeDef * led3Port = GPIOB;
 800027a:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <main+0xc4>)
 800027c:	61bb      	str	r3, [r7, #24]
  LED led3(led3Port, led3Pin);
 800027e:	7ffb      	ldrb	r3, [r7, #31]
 8000280:	b29a      	uxth	r2, r3
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	69b9      	ldr	r1, [r7, #24]
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffb7 	bl	80001fc <_ZN3LEDC1EP12GPIO_TypeDeft>

  uint8_t led2Pin = GPIO_PIN_7;
 800028e:	2380      	movs	r3, #128	@ 0x80
 8000290:	75fb      	strb	r3, [r7, #23]
  GPIO_TypeDef * led2Port = GPIOB;
 8000292:	4b25      	ldr	r3, [pc, #148]	@ (8000328 <main+0xc4>)
 8000294:	613b      	str	r3, [r7, #16]
  LED led2(led2Port, led2Pin);
 8000296:	7dfb      	ldrb	r3, [r7, #23]
 8000298:	b29a      	uxth	r2, r3
 800029a:	463b      	mov	r3, r7
 800029c:	6939      	ldr	r1, [r7, #16]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffac 	bl	80001fc <_ZN3LEDC1EP12GPIO_TypeDeft>

  led3.turnLedOn();
 80002a4:	f107 0308 	add.w	r3, r7, #8
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ffbb 	bl	8000224 <_ZN3LED9turnLedOnEv>
  led2.turnLedOn();
 80002ae:	463b      	mov	r3, r7
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffb7 	bl	8000224 <_ZN3LED9turnLedOnEv>
  HAL_Delay(5000);
 80002b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002ba:	f000 fa27 	bl	800070c <HAL_Delay>
  led3.turnLedOff();
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffbe 	bl	8000244 <_ZN3LED10turnLedOffEv>
  led2.turnLedOff();
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffba 	bl	8000244 <_ZN3LED10turnLedOffEv>
  HAL_Delay(5000);
 80002d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002d4:	f000 fa1a 	bl	800070c <HAL_Delay>
  // This works without below configuration
  // set bits 7:4 to 0010 for PC13 pin
  *SYSCFG_EXTICR4 = 0x00008828;
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <main+0xc8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f648 0228 	movw	r2, #34856	@ 0x8828
 80002e0:	601a      	str	r2, [r3, #0]
  *EXTI_RTSR2 = 0x00000000;
 80002e2:	4b13      	ldr	r3, [pc, #76]	@ (8000330 <main+0xcc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
  *EXTI_RTSR2 |= (0x1F << 3);   // Set bits 7:3 to 1 1111
 80002ea:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <main+0xcc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <main+0xcc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f042 02f8 	orr.w	r2, r2, #248	@ 0xf8
 80002f8:	601a      	str	r2, [r3, #0]
			  led2.turnLedOff();
		  }
	  }
#endif
#ifdef TIMER_INTERRUPT
	  if (buttonPressed)
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <main+0xd0>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00b      	beq.n	800031c <main+0xb8>
	  {
		  buttonPressed = false;
 8000304:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <main+0xd0>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
		  led2.turnLedOn();
 800030a:	463b      	mov	r3, r7
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff89 	bl	8000224 <_ZN3LED9turnLedOnEv>
		  HAL_Delay(1000); // Why we need this delay
 8000312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000316:	f000 f9f9 	bl	800070c <HAL_Delay>
 800031a:	e7ee      	b.n	80002fa <main+0x96>
	  }
	  else
	  {
		  led2.turnLedOff();
 800031c:	463b      	mov	r3, r7
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff90 	bl	8000244 <_ZN3LED10turnLedOffEv>
	  if (buttonPressed)
 8000324:	e7e9      	b.n	80002fa <main+0x96>
 8000326:	bf00      	nop
 8000328:	48000400 	.word	0x48000400
 800032c:	20000000 	.word	0x20000000
 8000330:	20000004 	.word	0x20000004
 8000334:	20000030 	.word	0x20000030

08000338 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b096      	sub	sp, #88	@ 0x58
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2244      	movs	r2, #68	@ 0x44
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fc3c 	bl	8001bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800035a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800035e:	f000 fced 	bl	8000d3c <HAL_PWREx_ControlVoltageScaling>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000372:	f000 f8b9 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000376:	2310      	movs	r3, #16
 8000378:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000382:	2360      	movs	r3, #96	@ 0x60
 8000384:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800038a:	2301      	movs	r3, #1
 800038c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800038e:	2301      	movs	r3, #1
 8000390:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000392:	2310      	movs	r3, #16
 8000394:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000396:	2302      	movs	r3, #2
 8000398:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800039a:	2302      	movs	r3, #2
 800039c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fd6c 	bl	8000e84 <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	bf14      	ite	ne
 80003b2:	2301      	movne	r3, #1
 80003b4:	2300      	moveq	r3, #0
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80003bc:	f000 f894 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2303      	movs	r3, #3
 80003c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d4:	463b      	mov	r3, r7
 80003d6:	2101      	movs	r1, #1
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 f96d 	bl	80016b8 <HAL_RCC_ClockConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	bf14      	ite	ne
 80003e4:	2301      	movne	r3, #1
 80003e6:	2300      	moveq	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80003ee:	f000 f87b 	bl	80004e8 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3758      	adds	r7, #88	@ 0x58
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <_ZL12MX_GPIO_Initv>:
//#endif
///* USER CODE END MX_GPIO_Init_2 */
//}

static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	4a27      	ldr	r2, [pc, #156]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041e:	4b25      	ldr	r3, [pc, #148]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800042a:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a21      	ldr	r2, [pc, #132]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	4a1b      	ldr	r2, [pc, #108]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000448:	f043 0302 	orr.w	r3, r3, #2
 800044c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <_ZL12MX_GPIO_Initv+0xb8>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	f003 0302 	and.w	r3, r3, #2
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	4816      	ldr	r0, [pc, #88]	@ (80004b8 <_ZL12MX_GPIO_Initv+0xbc>)
 8000460:	f000 fc1c 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4619      	mov	r1, r3
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <_ZL12MX_GPIO_Initv+0xc0>)
 800047c:	f000 fa7c 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	4808      	ldr	r0, [pc, #32]	@ (80004b8 <_ZL12MX_GPIO_Initv+0xbc>)
 8000498:	f000 fa6e 	bl	8000978 <HAL_GPIO_Init>
#ifdef TIMER_INTERRUPT
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2028      	movs	r0, #40	@ 0x28
 80004a2:	f000 fa32 	bl	800090a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004a6:	2028      	movs	r0, #40	@ 0x28
 80004a8:	f000 fa4b 	bl	8000942 <HAL_NVIC_EnableIRQ>
#endif
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000400 	.word	0x48000400
 80004bc:	48000800 	.word	0x48000800

080004c0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// Interrupt handler
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line9 (A9 Pin)
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	buttonPressed = true;
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
    }
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	20000030 	.word	0x20000030

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <Error_Handler+0x8>

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6613      	str	r3, [r2, #96]	@ 0x60
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051c:	6593      	str	r3, [r2, #88]	@ 0x58
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <NMI_Handler+0x4>

08000544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <MemManage_Handler+0x4>

08000554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <UsageFault_Handler+0x4>

08000564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f89b 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800059e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005a2:	f000 fb93 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff ffea 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f001 fae9 	bl	8001bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fe2f 	bl	8000264 <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000608:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000614:	08001c7c 	.word	0x08001c7c
  ldr r2, =_sbss
 8000618:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800061c:	20000038 	.word	0x20000038

08000620 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_IRQHandler>

08000622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f961 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f80e 	bl	8000654 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000644:	f7ff ff56 	bl	80004f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	79fb      	ldrb	r3, [r7, #7]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <HAL_InitTick+0x6c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d023      	beq.n	80006b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_InitTick+0x70>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <HAL_InitTick+0x6c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f96d 	bl	800095e <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10f      	bne.n	80006aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d809      	bhi.n	80006a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f937 	bl	800090a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HAL_InitTick+0x74>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e007      	b.n	80006b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e004      	b.n	80006b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e001      	b.n	80006b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000010 	.word	0x20000010
 80006c4:	20000008 	.word	0x20000008
 80006c8:	2000000c 	.word	0x2000000c

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000010 	.word	0x20000010
 80006f0:	20000034 	.word	0x20000034

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000034 	.word	0x20000034

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffde 	bl	80006f4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000010 	.word	0x20000010

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4907      	ldr	r1, [pc, #28]	@ (80007f0 <__NVIC_EnableIRQ+0x38>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	@ 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff29 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff3e 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff31 	bl	80007b8 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa2 	bl	80008b0 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e166      	b.n	8000c56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 8158 	beq.w	8000c50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d005      	beq.n	80009b8 <HAL_GPIO_Init+0x40>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d130      	bne.n	8000a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ee:	2201      	movs	r2, #1
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	f003 0201 	and.w	r2, r3, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d017      	beq.n	8000a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2203      	movs	r2, #3
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d123      	bne.n	8000aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	08da      	lsrs	r2, r3, #3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3208      	adds	r2, #8
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	220f      	movs	r2, #15
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	08da      	lsrs	r2, r3, #3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0203 	and.w	r2, r3, #3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 80b2 	beq.w	8000c50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	4b61      	ldr	r3, [pc, #388]	@ (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af0:	4a60      	ldr	r2, [pc, #384]	@ (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c74 <HAL_GPIO_Init+0x2fc>)
 8000afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b04:	4a5c      	ldr	r2, [pc, #368]	@ (8000c78 <HAL_GPIO_Init+0x300>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b2e:	d02b      	beq.n	8000b88 <HAL_GPIO_Init+0x210>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a52      	ldr	r2, [pc, #328]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d025      	beq.n	8000b84 <HAL_GPIO_Init+0x20c>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a51      	ldr	r2, [pc, #324]	@ (8000c80 <HAL_GPIO_Init+0x308>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d01f      	beq.n	8000b80 <HAL_GPIO_Init+0x208>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a50      	ldr	r2, [pc, #320]	@ (8000c84 <HAL_GPIO_Init+0x30c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d019      	beq.n	8000b7c <HAL_GPIO_Init+0x204>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8000c88 <HAL_GPIO_Init+0x310>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x200>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4e      	ldr	r2, [pc, #312]	@ (8000c8c <HAL_GPIO_Init+0x314>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1fc>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c90 <HAL_GPIO_Init+0x318>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1f8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4c      	ldr	r2, [pc, #304]	@ (8000c94 <HAL_GPIO_Init+0x31c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1f4>
 8000b68:	2307      	movs	r3, #7
 8000b6a:	e00e      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	e00c      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b70:	2306      	movs	r3, #6
 8000b72:	e00a      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b74:	2305      	movs	r3, #5
 8000b76:	e008      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x212>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b9a:	4937      	ldr	r1, [pc, #220]	@ (8000c78 <HAL_GPIO_Init+0x300>)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf6:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c20:	4a1d      	ldr	r2, [pc, #116]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c4a:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <HAL_GPIO_Init+0x320>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f47f ae91 	bne.w	8000988 <HAL_GPIO_Init+0x10>
  }
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48000800 	.word	0x48000800
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48001000 	.word	0x48001000
 8000c8c:	48001400 	.word	0x48001400
 8000c90:	48001800 	.word	0x48001800
 8000c94:	48001c00 	.word	0x48001c00
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbe8 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d0c:	d102      	bne.n	8000d14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d12:	e00b      	b.n	8000d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d22:	d102      	bne.n	8000d2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d28:	e000      	b.n	8000d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000d2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40007000 	.word	0x40007000

08000d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d141      	bne.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d56:	d131      	bne.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d58:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5e:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d70:	4a41      	ldr	r2, [pc, #260]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000d78:	4b40      	ldr	r3, [pc, #256]	@ (8000e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2232      	movs	r2, #50	@ 0x32
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	0c9b      	lsrs	r3, r3, #18
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8e:	e002      	b.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d96:	4b38      	ldr	r3, [pc, #224]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da2:	d102      	bne.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f2      	bne.n	8000d90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000daa:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000db6:	d158      	bne.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e057      	b.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000dcc:	e04d      	b.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dd4:	d141      	bne.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000de2:	d131      	bne.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2232      	movs	r2, #50	@ 0x32
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9b      	lsrs	r3, r3, #18
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1a:	e002      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e2e:	d102      	bne.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f2      	bne.n	8000e1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e42:	d112      	bne.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e011      	b.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e58:	e007      	b.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f000 bc08 	b.w	80016a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e98:	4b96      	ldr	r3, [pc, #600]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea2:	4b94      	ldr	r3, [pc, #592]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80e4 	beq.w	8001082 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x4c>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	f040 808b 	bne.w	8000fde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	f040 8087 	bne.w	8000fde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ed0:	4b88      	ldr	r3, [pc, #544]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x64>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e3df      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1a      	ldr	r2, [r3, #32]
 8000eec:	4b81      	ldr	r3, [pc, #516]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_RCC_OscConfig+0x7e>
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f00:	e005      	b.n	8000f0e <HAL_RCC_OscConfig+0x8a>
 8000f02:	4b7c      	ldr	r3, [pc, #496]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d223      	bcs.n	8000f5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fd94 	bl	8001a44 <RCC_SetFlashLatencyFromMSIRange>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e3c0      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f26:	4b73      	ldr	r3, [pc, #460]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a72      	ldr	r2, [pc, #456]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b70      	ldr	r3, [pc, #448]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	496d      	ldr	r1, [pc, #436]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f44:	4b6b      	ldr	r3, [pc, #428]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	4968      	ldr	r1, [pc, #416]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e025      	b.n	8000fa6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5a:	4b66      	ldr	r3, [pc, #408]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a65      	ldr	r2, [pc, #404]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b63      	ldr	r3, [pc, #396]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4960      	ldr	r1, [pc, #384]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f78:	4b5e      	ldr	r3, [pc, #376]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	495b      	ldr	r1, [pc, #364]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fd54 	bl	8001a44 <RCC_SetFlashLatencyFromMSIRange>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e380      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa6:	f000 fcc1 	bl	800192c <HAL_RCC_GetSysClockFreq>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b51      	ldr	r3, [pc, #324]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	4950      	ldr	r1, [pc, #320]	@ (80010f8 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	5ccb      	ldrb	r3, [r1, r3]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80010fc <HAL_RCC_OscConfig+0x278>)
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001100 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fb42 	bl	8000654 <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d052      	beq.n	8001080 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	e364      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d032      	beq.n	800104c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe6:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a42      	ldr	r2, [pc, #264]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb7f 	bl	80006f4 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fb7b 	bl	80006f4 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e34d      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800100c:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001018:	4b36      	ldr	r3, [pc, #216]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a35      	ldr	r2, [pc, #212]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4930      	ldr	r1, [pc, #192]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	492b      	ldr	r1, [pc, #172]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
 800104a:	e01a      	b.n	8001082 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001058:	f7ff fb4c 	bl	80006f4 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001060:	f7ff fb48 	bl	80006f4 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e31a      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1dc>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d073      	beq.n	8001176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b08      	cmp	r3, #8
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x21c>
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d10e      	bne.n	80010b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d063      	beq.n	8001174 <HAL_RCC_OscConfig+0x2f0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d15f      	bne.n	8001174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e2f7      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x24c>
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e025      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010d8:	d114      	bne.n	8001104 <HAL_RCC_OscConfig+0x280>
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a02      	ldr	r2, [pc, #8]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e013      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	08001c34 	.word	0x08001c34
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000000c 	.word	0x2000000c
 8001104:	4ba0      	ldr	r3, [pc, #640]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a9f      	ldr	r2, [pc, #636]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b9d      	ldr	r3, [pc, #628]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a9c      	ldr	r2, [pc, #624]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fae6 	bl	80006f4 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fae2 	bl	80006f4 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e2b4      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113e:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x2a8>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fad2 	bl	80006f4 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff face 	bl	80006f4 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e2a0      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001166:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x2d0>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d060      	beq.n	8001244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x310>
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d119      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x328>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e27d      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	061b      	lsls	r3, r3, #24
 80011ba:	4973      	ldr	r1, [pc, #460]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	e040      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d023      	beq.n	8001212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fa8d 	bl	80006f4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fa89 	bl	80006f4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e25b      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f0:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	495f      	ldr	r1, [pc, #380]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e018      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b5d      	ldr	r3, [pc, #372]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5c      	ldr	r2, [pc, #368]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800121c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fa69 	bl	80006f4 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fa65 	bl	80006f4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e237      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03c      	beq.n	80012ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01c      	beq.n	8001292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001258:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125e:	4a4a      	ldr	r2, [pc, #296]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fa44 	bl	80006f4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fa40 	bl	80006f4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e212      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001282:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0ef      	beq.n	8001270 <HAL_RCC_OscConfig+0x3ec>
 8001290:	e01b      	b.n	80012ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001298:	4a3b      	ldr	r2, [pc, #236]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff fa27 	bl	80006f4 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fa23 	bl	80006f4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1f5      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ef      	bne.n	80012aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10d      	bne.n	8001304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001300:	2301      	movs	r3, #1
 8001302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d118      	bne.n	8001342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131c:	f7ff f9ea 	bl	80006f4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001324:	f7ff f9e6 	bl	80006f4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1b8      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x4d8>
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800135a:	e029      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d115      	bne.n	8001390 <HAL_RCC_OscConfig+0x50c>
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	4b9d      	ldr	r3, [pc, #628]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001396:	4a9c      	ldr	r2, [pc, #624]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013a0:	4b99      	ldr	r3, [pc, #612]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a6:	4a98      	ldr	r2, [pc, #608]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d016      	beq.n	80013e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff f99c 	bl	80006f4 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff f998 	bl	80006f4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e168      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ed      	beq.n	80013c0 <HAL_RCC_OscConfig+0x53c>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff f985 	bl	80006f4 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f981 	bl	80006f4 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e151      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001404:	4b80      	ldr	r3, [pc, #512]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ed      	bne.n	80013ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b7b      	ldr	r3, [pc, #492]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a7a      	ldr	r2, [pc, #488]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03c      	beq.n	80014aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01c      	beq.n	8001472 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001438:	4b73      	ldr	r3, [pc, #460]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 800143a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800143e:	4a72      	ldr	r2, [pc, #456]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff f954 	bl	80006f4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff f950 	bl	80006f4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e122      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001462:	4b69      	ldr	r3, [pc, #420]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ef      	beq.n	8001450 <HAL_RCC_OscConfig+0x5cc>
 8001470:	e01b      	b.n	80014aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001472:	4b65      	ldr	r3, [pc, #404]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001478:	4a63      	ldr	r2, [pc, #396]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff f937 	bl	80006f4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800148a:	f7ff f933 	bl	80006f4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e105      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800149c:	4b5a      	ldr	r3, [pc, #360]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ef      	bne.n	800148a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80f9 	beq.w	80016a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	f040 80cf 	bne.w	800165c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014be:	4b52      	ldr	r3, [pc, #328]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d12c      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	3b01      	subs	r3, #1
 80014de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d123      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d11b      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d113      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	3b01      	subs	r3, #1
 8001512:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d109      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d071      	beq.n	8001610 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d068      	beq.n	8001604 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001532:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800153e:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0ac      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800154e:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2d      	ldr	r2, [pc, #180]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001558:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800155a:	f7ff f8cb 	bl	80006f4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff f8c7 	bl	80006f4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e099      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_RCC_OscConfig+0x788>)
 8001586:	4013      	ands	r3, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001590:	3a01      	subs	r2, #1
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800159a:	0212      	lsls	r2, r2, #8
 800159c:	4311      	orrs	r1, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015a2:	0852      	lsrs	r2, r2, #1
 80015a4:	3a01      	subs	r2, #1
 80015a6:	0552      	lsls	r2, r2, #21
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ae:	0852      	lsrs	r2, r2, #1
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0652      	lsls	r2, r2, #25
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015ba:	06d2      	lsls	r2, r2, #27
 80015bc:	430a      	orrs	r2, r1
 80015be:	4912      	ldr	r1, [pc, #72]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015dc:	f7ff f88a 	bl	80006f4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f886 	bl	80006f4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e058      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001602:	e050      	b.n	80016a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e04f      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
 8001608:	40021000 	.word	0x40021000
 800160c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d144      	bne.n	80016a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800161c:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a20      	ldr	r2, [pc, #128]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001634:	f7ff f85e 	bl	80006f4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f85a 	bl	80006f4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e02c      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x7b8>
 800165a:	e024      	b.n	80016a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d01f      	beq.n	80016a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff f841 	bl	80006f4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff f83d 	bl	80006f4 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e00f      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4905      	ldr	r1, [pc, #20]	@ (80016b0 <HAL_RCC_OscConfig+0x82c>)
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x830>)
 800169c:	4013      	ands	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e001      	b.n	80016a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	feeefffc 	.word	0xfeeefffc

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e11d      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b90      	ldr	r3, [pc, #576]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b8d      	ldr	r3, [pc, #564]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 020f 	bic.w	r2, r3, #15
 80016e6:	498b      	ldr	r1, [pc, #556]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b89      	ldr	r3, [pc, #548]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e105      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b81      	ldr	r3, [pc, #516]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001718:	429a      	cmp	r2, r3
 800171a:	d908      	bls.n	800172e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	497b      	ldr	r1, [pc, #492]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d079      	beq.n	800182e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d11e      	bne.n	8001780 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	4b75      	ldr	r3, [pc, #468]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0dc      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001752:	f000 f9d1 	bl	8001af8 <RCC_GetSysClockFreqFromPLLSource>
 8001756:	4603      	mov	r3, r0
 8001758:	4a70      	ldr	r2, [pc, #448]	@ (800191c <HAL_RCC_ClockConfig+0x264>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d946      	bls.n	80017ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800175e:	4b6e      	ldr	r3, [pc, #440]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d140      	bne.n	80017ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800176a:	4b6b      	ldr	r3, [pc, #428]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001772:	4a69      	ldr	r2, [pc, #420]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001778:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800177a:	2380      	movs	r3, #128	@ 0x80
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e035      	b.n	80017ec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d107      	bne.n	8001798 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001788:	4b63      	ldr	r3, [pc, #396]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d115      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b9      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0ad      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	4b59      	ldr	r3, [pc, #356]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0a5      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80017c0:	f000 f8b4 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <HAL_RCC_ClockConfig+0x264>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d90f      	bls.n	80017ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80017cc:	4b52      	ldr	r3, [pc, #328]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 0203 	bic.w	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4947      	ldr	r1, [pc, #284]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017fe:	f7fe ff79 	bl	80006f4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e00a      	b.n	800181c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7fe ff75 	bl	80006f4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e077      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181c:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 020c 	and.w	r2, r3, #12
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	429a      	cmp	r2, r3
 800182c:	d1eb      	bne.n	8001806 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b80      	cmp	r3, #128	@ 0x80
 8001832:	d105      	bne.n	8001840 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001834:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a37      	ldr	r2, [pc, #220]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800183a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800183e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d010      	beq.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001858:	429a      	cmp	r2, r3
 800185a:	d208      	bcs.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	492b      	ldr	r1, [pc, #172]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186e:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d210      	bcs.n	800189e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187c:	4b25      	ldr	r3, [pc, #148]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 020f 	bic.w	r2, r3, #15
 8001884:	4923      	ldr	r1, [pc, #140]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_RCC_ClockConfig+0x25c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e036      	b.n	800190c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4918      	ldr	r1, [pc, #96]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4910      	ldr	r1, [pc, #64]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018dc:	f000 f826 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_RCC_ClockConfig+0x260>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	490c      	ldr	r1, [pc, #48]	@ (8001920 <HAL_RCC_ClockConfig+0x268>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_RCC_ClockConfig+0x26c>)
 80018fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_ClockConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fea7 	bl	8000654 <HAL_InitTick>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]

  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40022000 	.word	0x40022000
 8001918:	40021000 	.word	0x40021000
 800191c:	04c4b400 	.word	0x04c4b400
 8001920:	08001c34 	.word	0x08001c34
 8001924:	20000008 	.word	0x20000008
 8001928:	2000000c 	.word	0x2000000c

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001944:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x34>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d121      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d11e      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001960:	4b34      	ldr	r3, [pc, #208]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d107      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800196c:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e005      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001988:	4a2b      	ldr	r2, [pc, #172]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	e004      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80019b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d134      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d003      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0xac>
 80019d0:	e005      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80019d4:	617b      	str	r3, [r7, #20]
      break;
 80019d6:	e005      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80019da:	617b      	str	r3, [r7, #20]
      break;
 80019dc:	e002      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	617b      	str	r3, [r7, #20]
      break;
 80019e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3301      	adds	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	fb03 f202 	mul.w	r2, r3, r2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	0e5b      	lsrs	r3, r3, #25
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	3301      	adds	r3, #1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a24:	69bb      	ldr	r3, [r7, #24]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	@ 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08001c44 	.word	0x08001c44
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200

08001a44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a5c:	f7ff f94e 	bl	8000cfc <HAL_PWREx_GetVoltageRange>
 8001a60:	6178      	str	r0, [r7, #20]
 8001a62:	e014      	b.n	8001a8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a68:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a7c:	f7ff f93e 	bl	8000cfc <HAL_PWREx_GetVoltageRange>
 8001a80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a94:	d10b      	bne.n	8001aae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b80      	cmp	r3, #128	@ 0x80
 8001a9a:	d913      	bls.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001aa0:	d902      	bls.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e00d      	b.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	e00a      	b.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ab2:	d902      	bls.n	8001aba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e004      	b.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b70      	cmp	r3, #112	@ 0x70
 8001abe:	d101      	bne.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 020f 	bic.w	r2, r3, #15
 8001acc:	4909      	ldr	r1, [pc, #36]	@ (8001af4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40022000 	.word	0x40022000

08001af8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001afe:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d00b      	beq.n	8001b26 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d825      	bhi.n	8001b60 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d008      	beq.n	8001b2c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d11f      	bne.n	8001b60 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001b22:	613b      	str	r3, [r7, #16]
    break;
 8001b24:	e01f      	b.n	8001b66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001b28:	613b      	str	r3, [r7, #16]
    break;
 8001b2a:	e01c      	b.n	8001b66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e005      	b.n	8001b54 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001b54:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	613b      	str	r3, [r7, #16]
    break;
 8001b5e:	e002      	b.n	8001b66 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
    break;
 8001b64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	3301      	adds	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0e5b      	lsrs	r3, r3, #25
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ba6:	683b      	ldr	r3, [r7, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200
 8001bc0:	08001c44 	.word	0x08001c44

08001bc4 <memset>:
 8001bc4:	4402      	add	r2, r0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d100      	bne.n	8001bce <memset+0xa>
 8001bcc:	4770      	bx	lr
 8001bce:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd2:	e7f9      	b.n	8001bc8 <memset+0x4>

08001bd4 <__libc_init_array>:
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8001c0c <__libc_init_array+0x38>)
 8001bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8001c10 <__libc_init_array+0x3c>)
 8001bda:	1b64      	subs	r4, r4, r5
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	2600      	movs	r6, #0
 8001be0:	42a6      	cmp	r6, r4
 8001be2:	d109      	bne.n	8001bf8 <__libc_init_array+0x24>
 8001be4:	4d0b      	ldr	r5, [pc, #44]	@ (8001c14 <__libc_init_array+0x40>)
 8001be6:	4c0c      	ldr	r4, [pc, #48]	@ (8001c18 <__libc_init_array+0x44>)
 8001be8:	f000 f818 	bl	8001c1c <_init>
 8001bec:	1b64      	subs	r4, r4, r5
 8001bee:	10a4      	asrs	r4, r4, #2
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	42a6      	cmp	r6, r4
 8001bf4:	d105      	bne.n	8001c02 <__libc_init_array+0x2e>
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
 8001bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfc:	4798      	blx	r3
 8001bfe:	3601      	adds	r6, #1
 8001c00:	e7ee      	b.n	8001be0 <__libc_init_array+0xc>
 8001c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c06:	4798      	blx	r3
 8001c08:	3601      	adds	r6, #1
 8001c0a:	e7f2      	b.n	8001bf2 <__libc_init_array+0x1e>
 8001c0c:	08001c74 	.word	0x08001c74
 8001c10:	08001c74 	.word	0x08001c74
 8001c14:	08001c74 	.word	0x08001c74
 8001c18:	08001c78 	.word	0x08001c78

08001c1c <_init>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr

08001c28 <_fini>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	bf00      	nop
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr
