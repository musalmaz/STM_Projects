
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006608  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c8  080068c8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c8  080068c8  000078c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080068d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000060  08006930  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006930  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c12  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266f  00000000  00000000  0001bca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  0001f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cda  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140e5  00000000  00000000  00049d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062b8  00000000  00000000  0005de59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  00164154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00168c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080067b0 	.word	0x080067b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	080067b0 	.word	0x080067b0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b09d      	sub	sp, #116	@ 0x74
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fcb4 	bl	8000f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f865 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9d7 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 f9a3 	bl	80008ec <MX_DMA_Init>
  MX_TIM1_Init();
 80005a6:	f000 f8f3 	bl	8000790 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 80005aa:	f000 f8a3 	bl	80006f4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start Timer in interrupt mode
  HAL_TIM_Base_Start_IT(&htim1);
 80005ae:	4828      	ldr	r0, [pc, #160]	@ (8000650 <main+0xc0>)
 80005b0:	f002 ffbe 	bl	8003530 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // https://deepbluembedded.com/stm32-timer-interrupt-hal-example-timer-mode-lab/
  uint16_t counterTicks = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  char MSG[50] = {'\0'};
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005c2:	222e      	movs	r2, #46	@ 0x2e
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fc72 	bl	8005eb0 <memset>
  char bufferIT[20] = "BUFFER IT\r\n";
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <main+0xc4>)
 80005ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80005d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
  char bufferDMA[20] = "BUFFER DMA\r\n";
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <main+0xc8>)
 80005e4:	f107 0414 	add.w	r4, r7, #20
 80005e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ea:	c407      	stmia	r4!, {r0, r1, r2}
 80005ec:	7023      	strb	r3, [r4, #0]
 80005ee:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	f8c3 2003 	str.w	r2, [r3, #3]
  char RxBuffer[20] = {'\0'};
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
//  HAL_UART_Receive_DMA(&hlpuart1, RxData, 4);
  while (1)
  {
	  counterTicks = TIM1->CNT;
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <main+0xcc>)
 800060c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800060e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	  if(HAL_UART_Receive(&hlpuart1, (char *)RxBuffer, 20, 100) == HAL_OK)
 8000612:	4639      	mov	r1, r7
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	2214      	movs	r2, #20
 8000618:	4811      	ldr	r0, [pc, #68]	@ (8000660 <main+0xd0>)
 800061a:	f004 f97f 	bl	800491c <HAL_UART_Receive>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10f      	bne.n	8000644 <main+0xb4>
	  {
		  RxBuffer[19] = '\0';
 8000624:	2300      	movs	r3, #0
 8000626:	74fb      	strb	r3, [r7, #19]
		  sprintf(MSG, "Incoming msg = %s \r\n\r", RxBuffer);
 8000628:	463a      	mov	r2, r7
 800062a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800062e:	490d      	ldr	r1, [pc, #52]	@ (8000664 <main+0xd4>)
 8000630:	4618      	mov	r0, r3
 8000632:	f005 fc1d 	bl	8005e70 <siprintf>
		  transmit_UART_MSG_Pooling(&hlpuart1, (char *)MSG, sizeof(MSG));
 8000636:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800063a:	2232      	movs	r2, #50	@ 0x32
 800063c:	4619      	mov	r1, r3
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <main+0xd0>)
 8000640:	f000 fc16 	bl	8000e70 <transmit_UART_MSG_Pooling>
//		  transmit_UART_MSG_IT(&hlpuart1, bufferIT, sizeof(bufferIT));
//
//		  transmit_UART_MSG_DMA(&hlpuart1, bufferDMA, sizeof(bufferDMA));
//		  transmit_UART_MSG_DMA(&hlpuart1, (char *)RxData, sizeof(RxData));
//	  }
	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000648:	f000 fcd0 	bl	8000fec <HAL_Delay>
	  counterTicks = TIM1->CNT;
 800064c:	e7dd      	b.n	800060a <main+0x7a>
 800064e:	bf00      	nop
 8000650:	200001d0 	.word	0x200001d0
 8000654:	080067e0 	.word	0x080067e0
 8000658:	080067f4 	.word	0x080067f4
 800065c:	40012c00 	.word	0x40012c00
 8000660:	2000007c 	.word	0x2000007c
 8000664:	080067c8 	.word	0x080067c8

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	@ 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fc1a 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f001 fa53 	bl	8001b38 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 f9f6 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	@ 0x40
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 faf4 	bl	8001ca0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006be:	f000 f9e3 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fefa 	bl	80024d4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006e6:	f000 f9cf 	bl	8000a88 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	@ 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	@ (8000788 <MX_LPUART1_UART_Init+0x94>)
 80006fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 1000000;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000700:	4a22      	ldr	r2, [pc, #136]	@ (800078c <MX_LPUART1_UART_Init+0x98>)
 8000702:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000718:	220c      	movs	r2, #12
 800071a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073a:	4812      	ldr	r0, [pc, #72]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 800073c:	f004 f810 	bl	8004760 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000746:	f000 f99f 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 800074e:	f005 fac4 	bl	8005cda <HAL_UARTEx_SetTxFifoThreshold>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000758:	f000 f996 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000760:	f005 faf9 	bl	8005d56 <HAL_UARTEx_SetRxFifoThreshold>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800076a:	f000 f98d 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000770:	f005 fa7a 	bl	8005c68 <HAL_UARTEx_DisableFifoMode>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800077a:	f000 f985 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000007c 	.word	0x2000007c
 8000788:	40008000 	.word	0x40008000
 800078c:	000f4240 	.word	0x000f4240

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09a      	sub	sp, #104	@ 0x68
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	222c      	movs	r2, #44	@ 0x2c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 fb70 	bl	8005eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d0:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007d2:	4a45      	ldr	r2, [pc, #276]	@ (80008e8 <MX_TIM1_Init+0x158>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600;
 80007d6:	4b43      	ldr	r3, [pc, #268]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007d8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80007dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b3d      	ldr	r3, [pc, #244]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f2:	4b3c      	ldr	r3, [pc, #240]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f8:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fe:	4839      	ldr	r0, [pc, #228]	@ (80008e4 <MX_TIM1_Init+0x154>)
 8000800:	f002 fe3e 	bl	8003480 <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800080a:	f000 f93d 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000812:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000814:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000818:	4619      	mov	r1, r3
 800081a:	4832      	ldr	r0, [pc, #200]	@ (80008e4 <MX_TIM1_Init+0x154>)
 800081c:	f003 f974 	bl	8003b08 <HAL_TIM_ConfigClockSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000826:	f000 f92f 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800082a:	482e      	ldr	r0, [pc, #184]	@ (80008e4 <MX_TIM1_Init+0x154>)
 800082c:	f002 fef0 	bl	8003610 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000836:	f000 f927 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800083a:	2320      	movs	r3, #32
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000846:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800084a:	4619      	mov	r1, r3
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <MX_TIM1_Init+0x154>)
 800084e:	f003 fe63 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000858:	f000 f916 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	2360      	movs	r3, #96	@ 0x60
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000878:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <MX_TIM1_Init+0x154>)
 8000882:	f003 f82d 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800088c:	f000 f8fc 	bl	8000a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80008c6:	f003 feaf 	bl	8004628 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008d0:	f000 f8da 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM1_Init+0x154>)
 80008d6:	f000 f9eb 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3768      	adds	r7, #104	@ 0x68
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001d0 	.word	0x200001d0
 80008e8:	40012c00 	.word	0x40012c00

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_DMA_Init+0x60>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f6:	4a15      	ldr	r2, [pc, #84]	@ (800094c <MX_DMA_Init+0x60>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_DMA_Init+0x60>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_DMA_Init+0x60>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <MX_DMA_Init+0x60>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6493      	str	r3, [r2, #72]	@ 0x48
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_DMA_Init+0x60>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200b      	movs	r0, #11
 8000928:	f000 fc5f 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800092c:	200b      	movs	r0, #11
 800092e:	f000 fc78 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200c      	movs	r0, #12
 8000938:	f000 fc57 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800093c:	200c      	movs	r0, #12
 800093e:	f000 fc70 	bl	8001222 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80009ae:	f001 f967 	bl	8001c80 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <MX_GPIO_Init+0xd8>)
 80009d0:	f001 f848 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <MX_GPIO_Init+0xdc>)
 80009ec:	f000 fea8 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_GPIO_Init+0xd8>)
 8000a08:	f000 fe9a 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2028      	movs	r0, #40	@ 0x28
 8000a12:	f000 fbea 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a16:	2028      	movs	r0, #40	@ 0x28
 8000a18:	f000 fc03 	bl	8001222 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	@ 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48000800 	.word	0x48000800

08000a30 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000a3c:	f001 f82a 	bl	8001a94 <HAL_GPIO_TogglePin>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	48000400 	.word	0x48000400

08000a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	char event_msg[20] = "Button pressed \r\n";
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a58:	f107 040c 	add.w	r4, r7, #12
 8000a5c:	461d      	mov	r5, r3
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	8023      	strh	r3, [r4, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	83fb      	strh	r3, [r7, #30]
   transmit_UART_MSG_IT_Event(&hlpuart1, event_msg, sizeof(event_msg));
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2214      	movs	r2, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a74:	f000 fa10 	bl	8000e98 <transmit_UART_MSG_IT_Event>
}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a80:	08006808 	.word	0x08006808
 8000a84:	2000007c 	.word	0x2000007c

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0ae      	sub	sp, #184	@ 0xb8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2294      	movs	r2, #148	@ 0x94
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f9d7 	bl	8005eb0 <memset>
  if(huart->Instance==LPUART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a50      	ldr	r2, [pc, #320]	@ (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	f040 8099 	bne.w	8000c40 <HAL_UART_MspInit+0x164>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b0e:	2320      	movs	r3, #32
 8000b10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 ff98 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b26:	f7ff ffaf 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b2a:	4b48      	ldr	r3, [pc, #288]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b2e:	4a47      	ldr	r2, [pc, #284]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b36:	4b45      	ldr	r3, [pc, #276]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b42:	4b42      	ldr	r3, [pc, #264]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a41      	ldr	r2, [pc, #260]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c4c <HAL_UART_MspInit+0x170>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000b5a:	f001 f891 	bl	8001c80 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b5e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4832      	ldr	r0, [pc, #200]	@ (8000c50 <HAL_UART_MspInit+0x174>)
 8000b86:	f000 fddb 	bl	8001740 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000b8a:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000b8c:	4a32      	ldr	r2, [pc, #200]	@ (8000c58 <HAL_UART_MspInit+0x17c>)
 8000b8e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b90:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000b92:	2222      	movs	r2, #34	@ 0x22
 8000b94:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b96:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000bc0:	4824      	ldr	r0, [pc, #144]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bc2:	f000 fb49 	bl	8001258 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000bcc:	f7ff ff5c 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a20      	ldr	r2, [pc, #128]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <HAL_UART_MspInit+0x178>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000be0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c60 <HAL_UART_MspInit+0x184>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000be6:	2223      	movs	r2, #35	@ 0x23
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000bec:	2210      	movs	r2, #16
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c16:	f000 fb1f 	bl	8001258 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000c20:	f7ff ff32 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <HAL_UART_MspInit+0x180>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2046      	movs	r0, #70	@ 0x46
 8000c36:	f000 fad8 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c3a:	2046      	movs	r0, #70	@ 0x46
 8000c3c:	f000 faf1 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	37b8      	adds	r7, #184	@ 0xb8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40008000 	.word	0x40008000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48001800 	.word	0x48001800
 8000c54:	20000110 	.word	0x20000110
 8000c58:	40020008 	.word	0x40020008
 8000c5c:	20000170 	.word	0x20000170
 8000c60:	4002001c 	.word	0x4002001c

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x44>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d113      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_TIM_Base_MspInit+0x48>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2019      	movs	r0, #25
 8000c94:	f000 faa9 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c98:	2019      	movs	r0, #25
 8000c9a:	f000 fac2 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012c00 	.word	0x40012c00
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11c      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f000 fd1a 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40012c00 	.word	0x40012c00
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48001000 	.word	0x48001000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f919 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <DMA1_Channel1_IRQHandler+0x10>)
 8000d86:	f000 fbca 	bl	800151e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000110 	.word	0x20000110

08000d94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <DMA1_Channel2_IRQHandler+0x10>)
 8000d9a:	f000 fbc0 	bl	800151e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000170 	.word	0x20000170

08000da8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dae:	f002 fc90 	bl	80036d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001d0 	.word	0x200001d0

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dc4:	f000 fe80 	bl	8001ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <LPUART1_IRQHandler+0x10>)
 8000dd2:	f003 fe6d 	bl	8004ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000007c 	.word	0x2000007c

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f005 f856 	bl	8005ec0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200a0000 	.word	0x200a0000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000021c 	.word	0x2000021c
 8000e48:	20000370 	.word	0x20000370

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <transmit_UART_MSG_Pooling>:

	}
}

void transmit_UART_MSG_Pooling(UART_HandleTypeDef *hlpuart1, const char * msg, size_t size_msg)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
//	for(size_t i= 0; i < size_msg; i++)
//	{
//		HAL_UART_Transmit(hlpuart1, (uint8_t *)&msg[i], 1, UART_TIMEOUT);
//
//	}
	HAL_UART_Transmit(hlpuart1, (char *)msg, size_msg, UART_TIMEOUT);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <transmit_UART_MSG_Pooling+0x24>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f003 fcba 	bl	8004800 <HAL_UART_Transmit>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000004 	.word	0x20000004

08000e98 <transmit_UART_MSG_IT_Event>:
{
	HAL_UART_Transmit_IT(hlpuart1, (uint8_t *)buf, size);
}

void transmit_UART_MSG_IT_Event(UART_HandleTypeDef *hlpuart1, const char * buf, size_t size)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]

}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb4:	f7ff ffca 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f004 fff5 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee2:	f7ff fb55 	bl	8000590 <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ef4:	080068d0 	.word	0x080068d0
  ldr r2, =_sbss
 8000ef8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000efc:	2000036c 	.word	0x2000036c

08000f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_IRQHandler>

08000f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f961 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f80e 	bl	8000f34 <HAL_InitTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	e001      	b.n	8000f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f24:	f7ff fdb6 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d023      	beq.n	8000f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_InitTick+0x70>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f96d 	bl	800123e <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d809      	bhi.n	8000f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f937 	bl	80011ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_InitTick+0x74>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e004      	b.n	8000f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e001      	b.n	8000f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000220 	.word	0x20000220

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000220 	.word	0x20000220

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000000c 	.word	0x2000000c

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e08d      	b.n	8001386 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_DMA_Init+0x138>)
 8001272:	429a      	cmp	r2, r3
 8001274:	d80f      	bhi.n	8001296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HAL_DMA_Init+0x13c>)
 800127e:	4413      	add	r3, r2
 8001280:	4a45      	ldr	r2, [pc, #276]	@ (8001398 <HAL_DMA_Init+0x140>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	009a      	lsls	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a42      	ldr	r2, [pc, #264]	@ (800139c <HAL_DMA_Init+0x144>)
 8001292:	641a      	str	r2, [r3, #64]	@ 0x40
 8001294:	e00e      	b.n	80012b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <HAL_DMA_Init+0x148>)
 800129e:	4413      	add	r3, r2
 80012a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001398 <HAL_DMA_Init+0x140>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	009a      	lsls	r2, r3, #2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a3c      	ldr	r2, [pc, #240]	@ (80013a4 <HAL_DMA_Init+0x14c>)
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80012ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f9b8 	bl	800167c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001314:	d102      	bne.n	800131c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001330:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d010      	beq.n	800135c <HAL_DMA_Init+0x104>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d80c      	bhi.n	800135c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f9d8 	bl	80016f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	e008      	b.n	800136e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40020407 	.word	0x40020407
 8001394:	bffdfff8 	.word	0xbffdfff8
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	40020000 	.word	0x40020000
 80013a0:	bffdfbf8 	.word	0xbffdfbf8
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e040      	b.n	8001454 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 020e 	bic.w	r2, r2, #14
 80013e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f003 021c 	and.w	r2, r3, #28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800141e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001432:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001436:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001440:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d005      	beq.n	8001484 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2204      	movs	r2, #4
 800147c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e047      	b.n	8001514 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 020e 	bic.w	r2, r2, #14
 8001492:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b8:	f003 021c 	and.w	r2, r3, #28
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00c      	beq.n	80014f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014f2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
    }
  }
  return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 031c 	and.w	r3, r3, #28
 800153e:	2204      	movs	r2, #4
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d026      	beq.n	8001598 <HAL_DMA_IRQHandler+0x7a>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d021      	beq.n	8001598 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0204 	bic.w	r2, r2, #4
 8001570:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f003 021c 	and.w	r2, r3, #28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2104      	movs	r1, #4
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d071      	beq.n	8001672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001596:	e06c      	b.n	8001672 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	f003 031c 	and.w	r3, r3, #28
 80015a0:	2202      	movs	r2, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02e      	beq.n	800160a <HAL_DMA_IRQHandler+0xec>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d029      	beq.n	800160a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020a 	bic.w	r2, r2, #10
 80015d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e0:	f003 021c 	and.w	r2, r3, #28
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	2102      	movs	r1, #2
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d038      	beq.n	8001672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001608:	e033      	b.n	8001672 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f003 031c 	and.w	r3, r3, #28
 8001612:	2208      	movs	r2, #8
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02a      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d025      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020e 	bic.w	r2, r2, #14
 8001636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163c:	f003 021c 	and.w	r2, r3, #28
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001672:	bf00      	nop
 8001674:	bf00      	nop
}
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800168c:	429a      	cmp	r2, r3
 800168e:	d80a      	bhi.n	80016a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800169c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6493      	str	r3, [r2, #72]	@ 0x48
 80016a4:	e007      	b.n	80016b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016b0:	4413      	add	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3b08      	subs	r3, #8
 80016be:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40020407 	.word	0x40020407
 80016ec:	4002081c 	.word	0x4002081c
 80016f0:	cccccccd 	.word	0xcccccccd
 80016f4:	40020880 	.word	0x40020880

080016f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a08      	ldr	r2, [pc, #32]	@ (800173c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800171a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3b01      	subs	r3, #1
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	1000823f 	.word	0x1000823f
 800173c:	40020940 	.word	0x40020940

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e166      	b.n	8001a1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8158 	beq.w	8001a18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x40>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d123      	bne.n	8001872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0203 	and.w	r2, r3, #3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80b2 	beq.w	8001a18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b61      	ldr	r3, [pc, #388]	@ (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b8:	4a60      	ldr	r2, [pc, #384]	@ (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HAL_GPIO_Init+0x2fc>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a40 <HAL_GPIO_Init+0x300>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018f6:	d02b      	beq.n	8001950 <HAL_GPIO_Init+0x210>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_GPIO_Init+0x304>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d025      	beq.n	800194c <HAL_GPIO_Init+0x20c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a51      	ldr	r2, [pc, #324]	@ (8001a48 <HAL_GPIO_Init+0x308>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d01f      	beq.n	8001948 <HAL_GPIO_Init+0x208>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_GPIO_Init+0x30c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d019      	beq.n	8001944 <HAL_GPIO_Init+0x204>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <HAL_GPIO_Init+0x310>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <HAL_GPIO_Init+0x200>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a54 <HAL_GPIO_Init+0x314>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_GPIO_Init+0x1fc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a4d      	ldr	r2, [pc, #308]	@ (8001a58 <HAL_GPIO_Init+0x318>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x1f8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <HAL_GPIO_Init+0x31c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_GPIO_Init+0x1f4>
 8001930:	2307      	movs	r3, #7
 8001932:	e00e      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001934:	2308      	movs	r3, #8
 8001936:	e00c      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001938:	2306      	movs	r3, #6
 800193a:	e00a      	b.n	8001952 <HAL_GPIO_Init+0x212>
 800193c:	2305      	movs	r3, #5
 800193e:	e008      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001940:	2304      	movs	r3, #4
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001944:	2303      	movs	r3, #3
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x212>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x212>
 8001950:	2300      	movs	r3, #0
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001962:	4937      	ldr	r1, [pc, #220]	@ (8001a40 <HAL_GPIO_Init+0x300>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001970:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001994:	4a32      	ldr	r2, [pc, #200]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199a:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019be:	4a28      	ldr	r2, [pc, #160]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_GPIO_Init+0x320>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f ae91 	bne.w	8001750 <HAL_GPIO_Init+0x10>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	48001000 	.word	0x48001000
 8001a54:	48001400 	.word	0x48001400
 8001a58:	48001800 	.word	0x48001800
 8001a5c:	48001c00 	.word	0x48001c00
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43d9      	mvns	r1, r3
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ffb0 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b08:	d102      	bne.n	8001b10 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b0e:	e00b      	b.n	8001b28 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b1e:	d102      	bne.n	8001b26 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b24:	e000      	b.n	8001b28 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b26:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40007000 	.word	0x40007000

08001b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d141      	bne.n	8001bca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b46:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b52:	d131      	bne.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b5a:	4a46      	ldr	r2, [pc, #280]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b64:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b6c:	4a41      	ldr	r2, [pc, #260]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b74:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2232      	movs	r2, #50	@ 0x32
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8a:	e002      	b.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f2      	bne.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba6:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb2:	d158      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e057      	b.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bc8:	e04d      	b.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd0:	d141      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bde:	d131      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001be6:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2232      	movs	r2, #50	@ 0x32
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c16:	e002      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2a:	d102      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3e:	d112      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e011      	b.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c54:	e007      	b.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c64:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40007000 	.word	0x40007000
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6053      	str	r3, [r2, #4]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f000 bc08 	b.w	80024c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb4:	4b96      	ldr	r3, [pc, #600]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbe:	4b94      	ldr	r3, [pc, #592]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80e4 	beq.w	8001e9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_RCC_OscConfig+0x4c>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	f040 808b 	bne.w	8001dfa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	f040 8087 	bne.w	8001dfa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cec:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x64>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e3df      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4b81      	ldr	r3, [pc, #516]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_RCC_OscConfig+0x7e>
 8001d14:	4b7e      	ldr	r3, [pc, #504]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_OscConfig+0x8a>
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d223      	bcs.n	8001d76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fdcc 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e3c0      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d42:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a72      	ldr	r2, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b70      	ldr	r3, [pc, #448]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	496d      	ldr	r1, [pc, #436]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d60:	4b6b      	ldr	r3, [pc, #428]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	4968      	ldr	r1, [pc, #416]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e025      	b.n	8001dc2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d76:	4b66      	ldr	r3, [pc, #408]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a65      	ldr	r2, [pc, #404]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4960      	ldr	r1, [pc, #384]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	495b      	ldr	r1, [pc, #364]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fd8c 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e380      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc2:	f000 fcc1 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b51      	ldr	r3, [pc, #324]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4950      	ldr	r1, [pc, #320]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a4e      	ldr	r2, [pc, #312]	@ (8001f18 <HAL_RCC_OscConfig+0x278>)
 8001de0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001de2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f1c <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f8a4 	bl	8000f34 <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d052      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	e364      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d032      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f8e1 	bl	8000fd4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e16:	f7ff f8dd 	bl	8000fd4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e34d      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e28:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4930      	ldr	r1, [pc, #192]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e52:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	492b      	ldr	r1, [pc, #172]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
 8001e66:	e01a      	b.n	8001e9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e74:	f7ff f8ae 	bl	8000fd4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f8aa 	bl	8000fd4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e31a      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1dc>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d073      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x21c>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d063      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d15f      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e2f7      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x24c>
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0x298>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef4:	d114      	bne.n	8001f20 <HAL_RCC_OscConfig+0x280>
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a02      	ldr	r2, [pc, #8]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x298>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	0800681c 	.word	0x0800681c
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	4ba0      	ldr	r3, [pc, #640]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a9f      	ldr	r2, [pc, #636]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a9c      	ldr	r2, [pc, #624]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f848 	bl	8000fd4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f844 	bl	8000fd4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e2b4      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5a:	4b92      	ldr	r3, [pc, #584]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2a8>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f834 	bl	8000fd4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f830 	bl	8000fd4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e2a0      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d0>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d060      	beq.n	8002060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x310>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x328>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e27d      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	4973      	ldr	r1, [pc, #460]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	e040      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d023      	beq.n	800202e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe ffef 	bl	8000fd4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe ffeb 	bl	8000fd4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e25b      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200c:	4b65      	ldr	r3, [pc, #404]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b62      	ldr	r3, [pc, #392]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	495f      	ldr	r1, [pc, #380]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e018      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5c      	ldr	r2, [pc, #368]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe ffcb 	bl	8000fd4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe ffc7 	bl	8000fd4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e237      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002054:	4b53      	ldr	r3, [pc, #332]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01c      	beq.n	80020ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207a:	4a4a      	ldr	r2, [pc, #296]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe ffa6 	bl	8000fd4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe ffa2 	bl	8000fd4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e212      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209e:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ef      	beq.n	800208c <HAL_RCC_OscConfig+0x3ec>
 80020ac:	e01b      	b.n	80020e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b4:	4a3b      	ldr	r2, [pc, #236]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7fe ff89 	bl	8000fd4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7fe ff85 	bl	8000fd4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1f5      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ef      	bne.n	80020c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80a6 	beq.w	8002240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020f8:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a26      	ldr	r2, [pc, #152]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d118      	bne.n	800215e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002138:	f7fe ff4c 	bl	8000fd4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe ff48 	bl	8000fd4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1b8      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x4d8>
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002176:	e029      	b.n	80021cc <HAL_RCC_OscConfig+0x52c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d115      	bne.n	80021ac <HAL_RCC_OscConfig+0x50c>
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a03      	ldr	r2, [pc, #12]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x52c>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a9c      	ldr	r2, [pc, #624]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021bc:	4b99      	ldr	r3, [pc, #612]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c2:	4a98      	ldr	r2, [pc, #608]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d016      	beq.n	8002202 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fefe 	bl	8000fd4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fefa 	bl	8000fd4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e168      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ed      	beq.n	80021dc <HAL_RCC_OscConfig+0x53c>
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe fee7 	bl	8000fd4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fee3 	bl	8000fd4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e151      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002220:	4b80      	ldr	r3, [pc, #512]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ed      	bne.n	800220a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002238:	4a7a      	ldr	r2, [pc, #488]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01c      	beq.n	800228e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002254:	4b73      	ldr	r3, [pc, #460]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800225a:	4a72      	ldr	r2, [pc, #456]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe feb6 	bl	8000fd4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226c:	f7fe feb2 	bl	8000fd4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e122      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800227e:	4b69      	ldr	r3, [pc, #420]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ef      	beq.n	800226c <HAL_RCC_OscConfig+0x5cc>
 800228c:	e01b      	b.n	80022c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800228e:	4b65      	ldr	r3, [pc, #404]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002294:	4a63      	ldr	r2, [pc, #396]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fe99 	bl	8000fd4 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a6:	f7fe fe95 	bl	8000fd4 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e105      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80022ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80f9 	beq.w	80024c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	f040 80cf 	bne.w	8002478 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022da:	4b52      	ldr	r3, [pc, #328]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d12c      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f8:	3b01      	subs	r3, #1
 80022fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d123      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d11b      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d113      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d109      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	3b01      	subs	r3, #1
 8002342:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d071      	beq.n	800242c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d068      	beq.n	8002420 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800234e:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ac      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800236a:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2d      	ldr	r2, [pc, #180]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002374:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002376:	f7fe fe2d 	bl	8000fd4 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fe29 	bl	8000fd4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e099      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_RCC_OscConfig+0x788>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023ac:	3a01      	subs	r2, #1
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023b6:	0212      	lsls	r2, r2, #8
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023be:	0852      	lsrs	r2, r2, #1
 80023c0:	3a01      	subs	r2, #1
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023ca:	0852      	lsrs	r2, r2, #1
 80023cc:	3a01      	subs	r2, #1
 80023ce:	0652      	lsls	r2, r2, #25
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023d6:	06d2      	lsls	r2, r2, #27
 80023d8:	430a      	orrs	r2, r1
 80023da:	4912      	ldr	r1, [pc, #72]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f8:	f7fe fdec 	bl	8000fd4 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fde8 	bl	8000fd4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e058      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241e:	e050      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04f      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
 8002424:	40021000 	.word	0x40021000
 8002428:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d144      	bne.n	80024c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a20      	ldr	r2, [pc, #128]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002450:	f7fe fdc0 	bl	8000fd4 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fdbc 	bl	8000fd4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e02c      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x7b8>
 8002476:	e024      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d01f      	beq.n	80024be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fda3 	bl	8000fd4 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fd9f 	bl	8000fd4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4905      	ldr	r1, [pc, #20]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_OscConfig+0x830>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
 80024bc:	e001      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	feeefffc 	.word	0xfeeefffc

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e11d      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b90      	ldr	r3, [pc, #576]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 020f 	bic.w	r2, r3, #15
 8002502:	498b      	ldr	r1, [pc, #556]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b89      	ldr	r3, [pc, #548]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e105      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b81      	ldr	r3, [pc, #516]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002534:	429a      	cmp	r2, r3
 8002536:	d908      	bls.n	800254a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b7e      	ldr	r3, [pc, #504]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	497b      	ldr	r1, [pc, #492]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d079      	beq.n	800264a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d11e      	bne.n	800259c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b75      	ldr	r3, [pc, #468]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0dc      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800256e:	f000 fa09 	bl	8002984 <RCC_GetSysClockFreqFromPLLSource>
 8002572:	4603      	mov	r3, r0
 8002574:	4a70      	ldr	r2, [pc, #448]	@ (8002738 <HAL_RCC_ClockConfig+0x264>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d946      	bls.n	8002608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800257a:	4b6e      	ldr	r3, [pc, #440]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d140      	bne.n	8002608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002586:	4b6b      	ldr	r3, [pc, #428]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800258e:	4a69      	ldr	r2, [pc, #420]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002594:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e035      	b.n	8002608 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a4:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d115      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b9      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0ad      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	4b59      	ldr	r3, [pc, #356]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0a5      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80025dc:	f000 f8b4 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a55      	ldr	r2, [pc, #340]	@ (8002738 <HAL_RCC_ClockConfig+0x264>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d90f      	bls.n	8002608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025e8:	4b52      	ldr	r3, [pc, #328]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002602:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4947      	ldr	r1, [pc, #284]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261a:	f7fe fcdb 	bl	8000fd4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fcd7 	bl	8000fd4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e077      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b3e      	ldr	r3, [pc, #248]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 020c 	and.w	r2, r3, #12
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	429a      	cmp	r2, r3
 8002648:	d1eb      	bne.n	8002622 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b80      	cmp	r3, #128	@ 0x80
 800264e:	d105      	bne.n	800265c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002650:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800265a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002674:	429a      	cmp	r2, r3
 8002676:	d208      	bcs.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	492b      	ldr	r1, [pc, #172]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268a:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d210      	bcs.n	80026ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002698:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 020f 	bic.w	r2, r3, #15
 80026a0:	4923      	ldr	r1, [pc, #140]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e036      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4918      	ldr	r1, [pc, #96]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4910      	ldr	r1, [pc, #64]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f8:	f000 f826 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	490c      	ldr	r1, [pc, #48]	@ (800273c <HAL_RCC_ClockConfig+0x268>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <HAL_RCC_ClockConfig+0x26c>)
 8002716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_RCC_ClockConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fc09 	bl	8000f34 <HAL_InitTick>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]

  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
 8002738:	04c4b400 	.word	0x04c4b400
 800273c:	0800681c 	.word	0x0800681c
 8002740:	20000000 	.word	0x20000000
 8002744:	20000008 	.word	0x20000008

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d121      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11e      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e004      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d134      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xa6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ec:	e005      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f0:	617b      	str	r3, [r7, #20]
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027f6:	617b      	str	r3, [r7, #20]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0e5b      	lsrs	r3, r3, #25
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	3301      	adds	r3, #1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	08006834 	.word	0x08006834
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	0800682c 	.word	0x0800682c

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a8:	f7ff ffda 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	0800682c 	.word	0x0800682c

080028d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028dc:	4b27      	ldr	r3, [pc, #156]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e8:	f7ff f906 	bl	8001af8 <HAL_PWREx_GetVoltageRange>
 80028ec:	6178      	str	r0, [r7, #20]
 80028ee:	e014      	b.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	4a21      	ldr	r2, [pc, #132]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fc:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002908:	f7ff f8f6 	bl	8001af8 <HAL_PWREx_GetVoltageRange>
 800290c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	4a1a      	ldr	r2, [pc, #104]	@ (800297c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002920:	d10b      	bne.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b80      	cmp	r3, #128	@ 0x80
 8002926:	d913      	bls.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2ba0      	cmp	r3, #160	@ 0xa0
 800292c:	d902      	bls.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800292e:	2302      	movs	r3, #2
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e00d      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e00a      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b7f      	cmp	r3, #127	@ 0x7f
 800293e:	d902      	bls.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e004      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b70      	cmp	r3, #112	@ 0x70
 800294a:	d101      	bne.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 020f 	bic.w	r2, r3, #15
 8002958:	4909      	ldr	r1, [pc, #36]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	40022000 	.word	0x40022000

08002984 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d00b      	beq.n	80029b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d825      	bhi.n	80029ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d008      	beq.n	80029b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d11f      	bne.n	80029ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029ae:	613b      	str	r3, [r7, #16]
    break;
 80029b0:	e01f      	b.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80029b2:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80029b4:	613b      	str	r3, [r7, #16]
    break;
 80029b6:	e01c      	b.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e005      	b.n	80029e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	613b      	str	r3, [r7, #16]
    break;
 80029ea:	e002      	b.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
    break;
 80029f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	3301      	adds	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	fb03 f202 	mul.w	r2, r3, r2
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0e5b      	lsrs	r3, r3, #25
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a32:	683b      	ldr	r3, [r7, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200
 8002a4c:	08006834 	.word	0x08006834

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d040      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a70:	2b80      	cmp	r3, #128	@ 0x80
 8002a72:	d02a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a74:	2b80      	cmp	r3, #128	@ 0x80
 8002a76:	d825      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a78:	2b60      	cmp	r3, #96	@ 0x60
 8002a7a:	d026      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a7c:	2b60      	cmp	r3, #96	@ 0x60
 8002a7e:	d821      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a80:	2b40      	cmp	r3, #64	@ 0x40
 8002a82:	d006      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a84:	2b40      	cmp	r3, #64	@ 0x40
 8002a86:	d81d      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a90:	e018      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a92:	4b89      	ldr	r3, [pc, #548]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a88      	ldr	r2, [pc, #544]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a9e:	e015      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fb02 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab0:	e00c      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fbed 	bl	8003298 <RCCEx_PLLSAI2_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac2:	e003      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	74fb      	strb	r3, [r7, #19]
      break;
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad2:	4b79      	ldr	r3, [pc, #484]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ad8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae0:	4975      	ldr	r1, [pc, #468]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002ae8:	e001      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d047      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b02:	d030      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b08:	d82a      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b0e:	d02a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b14:	d824      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b20:	d81e      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b2c:	e018      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2e:	4b62      	ldr	r3, [pc, #392]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a61      	ldr	r2, [pc, #388]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b3a:	e015      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fab4 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b4c:	e00c      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3320      	adds	r3, #32
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fb9f 	bl	8003298 <RCCEx_PLLSAI2_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b5e:	e003      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	74fb      	strb	r3, [r7, #19]
      break;
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b6e:	4b52      	ldr	r3, [pc, #328]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	494e      	ldr	r1, [pc, #312]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b84:	e001      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 809f 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b9c:	4b46      	ldr	r3, [pc, #280]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	4a40      	ldr	r2, [pc, #256]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bda:	f7fe f9fb 	bl	8000fd4 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002be0:	e009      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe f9f7 	bl	8000fd4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d902      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf4:	e005      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf6:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ef      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15b      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c08:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c12:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01f      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d019      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	4b24      	ldr	r3, [pc, #144]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c32:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c42:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c52:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d016      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f9b6 	bl	8000fd4 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f9b2 	bl	8000fd4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d902      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	74fb      	strb	r3, [r7, #19]
            break;
 8002c82:	e006      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ec      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	4903      	ldr	r1, [pc, #12]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	74bb      	strb	r3, [r7, #18]
 8002cb6:	e005      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc4:	7c7b      	ldrb	r3, [r7, #17]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4ba0      	ldr	r3, [pc, #640]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	4a9f      	ldr	r2, [pc, #636]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce2:	4b9a      	ldr	r3, [pc, #616]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	f023 0203 	bic.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	4996      	ldr	r1, [pc, #600]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d04:	4b91      	ldr	r3, [pc, #580]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f023 020c 	bic.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	498e      	ldr	r1, [pc, #568]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d26:	4b89      	ldr	r3, [pc, #548]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	4985      	ldr	r1, [pc, #532]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d48:	4b80      	ldr	r3, [pc, #512]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	497d      	ldr	r1, [pc, #500]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d6a:	4b78      	ldr	r3, [pc, #480]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d78:	4974      	ldr	r1, [pc, #464]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	496c      	ldr	r1, [pc, #432]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dae:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dbc:	4963      	ldr	r1, [pc, #396]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dde:	495b      	ldr	r1, [pc, #364]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df2:	4b56      	ldr	r3, [pc, #344]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	4952      	ldr	r1, [pc, #328]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e14:	4b4d      	ldr	r3, [pc, #308]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	494a      	ldr	r1, [pc, #296]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e36:	4b45      	ldr	r3, [pc, #276]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	4941      	ldr	r1, [pc, #260]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e58:	4b3c      	ldr	r3, [pc, #240]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e66:	4939      	ldr	r1, [pc, #228]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d028      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7a:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e88:	4930      	ldr	r1, [pc, #192]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	60d3      	str	r3, [r2, #12]
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f8f9 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d04d      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ee8:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ef2:	e012      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002ef4:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002efa:	4a14      	ldr	r2, [pc, #80]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f00:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f12:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f22:	d106      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	60d3      	str	r3, [r2, #12]
 8002f30:	e020      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f3a:	d109      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a02      	ldr	r2, [pc, #8]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
 8002f48:	e014      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f8a5 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d028      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f80:	4b4a      	ldr	r3, [pc, #296]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f8e:	4947      	ldr	r1, [pc, #284]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f9e:	d106      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b42      	ldr	r3, [pc, #264]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a41      	ldr	r2, [pc, #260]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]
 8002fac:	e011      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f876 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01e      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fee:	492f      	ldr	r1, [pc, #188]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003000:	d10c      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f851 	bl	80030b0 <RCCEx_PLLSAI1_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800302e:	f023 0204 	bic.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003038:	491c      	ldr	r1, [pc, #112]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800304c:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003052:	f023 0218 	bic.w	r2, r3, #24
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	4913      	ldr	r1, [pc, #76]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003070:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003080:	490a      	ldr	r1, [pc, #40]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003092:	d105      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030be:	4b72      	ldr	r3, [pc, #456]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0203 	and.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d103      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
       ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d142      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e03f      	b.n	8003168 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d018      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x72>
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d825      	bhi.n	8003140 <RCCEx_PLLSAI1_Config+0x90>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x4e>
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d009      	beq.n	8003110 <RCCEx_PLLSAI1_Config+0x60>
 80030fc:	e020      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030fe:	4b62      	ldr	r3, [pc, #392]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310e:	e01a      	b.n	8003146 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003110:	4b5d      	ldr	r3, [pc, #372]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d116      	bne.n	800314a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e013      	b.n	800314a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003122:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800312e:	4b56      	ldr	r3, [pc, #344]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800313e:	e006      	b.n	800314e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e004      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800314e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003156:	4b4c      	ldr	r3, [pc, #304]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4949      	ldr	r1, [pc, #292]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 8086 	bne.w	800327c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003170:	4b45      	ldr	r3, [pc, #276]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a44      	ldr	r2, [pc, #272]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800317a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fd ff2a 	bl	8000fd4 <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003182:	e009      	b.n	8003198 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003184:	f7fd ff26 	bl	8000fd4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	73fb      	strb	r3, [r7, #15]
        break;
 8003196:	e005      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003198:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ef      	bne.n	8003184 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d168      	bne.n	800327c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d113      	bne.n	80031d8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b0:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	0211      	lsls	r1, r2, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	06d2      	lsls	r2, r2, #27
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6852      	ldr	r2, [r2, #4]
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	430a      	orrs	r2, r1
 80031d0:	492d      	ldr	r1, [pc, #180]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
 80031d6:	e02d      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d115      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031de:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	0211      	lsls	r1, r2, #8
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6912      	ldr	r2, [r2, #16]
 80031f0:	0852      	lsrs	r2, r2, #1
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0552      	lsls	r2, r2, #21
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6852      	ldr	r2, [r2, #4]
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	430a      	orrs	r2, r1
 8003202:	4921      	ldr	r1, [pc, #132]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	610b      	str	r3, [r1, #16]
 8003208:	e014      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	0211      	lsls	r1, r2, #8
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6952      	ldr	r2, [r2, #20]
 800321c:	0852      	lsrs	r2, r2, #1
 800321e:	3a01      	subs	r2, #1
 8003220:	0652      	lsls	r2, r2, #25
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6852      	ldr	r2, [r2, #4]
 8003228:	3a01      	subs	r2, #1
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	430a      	orrs	r2, r1
 800322e:	4916      	ldr	r1, [pc, #88]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003230:	4313      	orrs	r3, r2
 8003232:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003234:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 800323a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800323e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd fec8 	bl	8000fd4 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003246:	e009      	b.n	800325c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003248:	f7fd fec4 	bl	8000fd4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d902      	bls.n	800325c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	73fb      	strb	r3, [r7, #15]
          break;
 800325a:	e005      	b.n	8003268 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800325c:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ef      	beq.n	8003248 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	4904      	ldr	r1, [pc, #16]	@ (8003288 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	07ff800f 	.word	0x07ff800f
 8003290:	ff9f800f 	.word	0xff9f800f
 8003294:	f9ff800f 	.word	0xf9ff800f

08003298 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032a6:	4b72      	ldr	r3, [pc, #456]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
       ||
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d142      	bne.n	8003350 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e03f      	b.n	8003350 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI2_Config+0x72>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI2_Config+0x90>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0x4e>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI2_Config+0x60>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b62      	ldr	r3, [pc, #392]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b56      	ldr	r3, [pc, #344]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800333e:	4b4c      	ldr	r3, [pc, #304]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4949      	ldr	r1, [pc, #292]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800334c:	4313      	orrs	r3, r2
 800334e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 8086 	bne.w	8003464 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003358:	4b45      	ldr	r3, [pc, #276]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a44      	ldr	r2, [pc, #272]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003364:	f7fd fe36 	bl	8000fd4 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800336a:	e009      	b.n	8003380 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800336c:	f7fd fe32 	bl	8000fd4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	73fb      	strb	r3, [r7, #15]
        break;
 800337e:	e005      	b.n	800338c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003380:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ef      	bne.n	800336c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d168      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003398:	4b35      	ldr	r3, [pc, #212]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <RCCEx_PLLSAI2_Config+0x1dc>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	06d2      	lsls	r2, r2, #27
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6852      	ldr	r2, [r2, #4]
 80033b2:	3a01      	subs	r2, #1
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	430a      	orrs	r2, r1
 80033b8:	492d      	ldr	r1, [pc, #180]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	614b      	str	r3, [r1, #20]
 80033be:	e02d      	b.n	800341c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d115      	bne.n	80033f2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <RCCEx_PLLSAI2_Config+0x1e0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	0211      	lsls	r1, r2, #8
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6912      	ldr	r2, [r2, #16]
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	3a01      	subs	r2, #1
 80033dc:	0552      	lsls	r2, r2, #21
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4921      	ldr	r1, [pc, #132]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	614b      	str	r3, [r1, #20]
 80033f0:	e014      	b.n	800341c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <RCCEx_PLLSAI2_Config+0x1e4>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	0211      	lsls	r1, r2, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6952      	ldr	r2, [r2, #20]
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6852      	ldr	r2, [r2, #4]
 8003410:	3a01      	subs	r2, #1
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	430a      	orrs	r2, r1
 8003416:	4916      	ldr	r1, [pc, #88]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003426:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fd fdd4 	bl	8000fd4 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003430:	f7fd fdd0 	bl	8000fd4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
          break;
 8003442:	e005      	b.n	8003450 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	4904      	ldr	r1, [pc, #16]	@ (8003470 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	07ff800f 	.word	0x07ff800f
 8003478:	ff9f800f 	.word	0xff9f800f
 800347c:	f9ff800f 	.word	0xf9ff800f

08003480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e049      	b.n	8003526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fbdc 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 fc14 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d001      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e04f      	b.n	80035e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003572:	d018      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1f      	ldr	r2, [pc, #124]	@ (80035f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1e      	ldr	r2, [pc, #120]	@ (80035fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1c      	ldr	r2, [pc, #112]	@ (8003600 <HAL_TIM_Base_Start_IT+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1b      	ldr	r2, [pc, #108]	@ (8003604 <HAL_TIM_Base_Start_IT+0xd4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIM_Base_Start_IT+0x76>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a19      	ldr	r2, [pc, #100]	@ (8003608 <HAL_TIM_Base_Start_IT+0xd8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d115      	bne.n	80035d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b17      	ldr	r3, [pc, #92]	@ (800360c <HAL_TIM_Base_Start_IT+0xdc>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d015      	beq.n	80035e4 <HAL_TIM_Base_Start_IT+0xb4>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d011      	beq.n	80035e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	e008      	b.n	80035e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e000      	b.n	80035e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40013400 	.word	0x40013400
 8003608:	40014000 	.word	0x40014000
 800360c:	00010007 	.word	0x00010007

08003610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e049      	b.n	80036b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f841 	bl	80036be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f000 fb4c 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01b      	beq.n	8003736 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f06f 0202 	mvn.w	r2, #2
 8003706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fac6 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 8003722:	e005      	b.n	8003730 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fab8 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fac9 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01b      	beq.n	8003782 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0204 	mvn.w	r2, #4
 8003752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 faa0 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 800376e:	e005      	b.n	800377c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa92 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 faa3 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01b      	beq.n	80037ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f06f 0208 	mvn.w	r2, #8
 800379e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2204      	movs	r2, #4
 80037a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa7a 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 80037ba:	e005      	b.n	80037c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa6c 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa7d 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01b      	beq.n	800381a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0210 	mvn.w	r2, #16
 80037ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2208      	movs	r2, #8
 80037f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa54 	bl	8003cae <HAL_TIM_IC_CaptureCallback>
 8003806:	e005      	b.n	8003814 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fa46 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa57 	bl	8003cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0201 	mvn.w	r2, #1
 8003836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd f8f9 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 ff66 	bl	8004738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 ff5e 	bl	800474c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa11 	bl	8003cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 ff26 	bl	8004724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ff      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b14      	cmp	r3, #20
 800390a:	f200 80f0 	bhi.w	8003aee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003969 	.word	0x08003969
 8003918:	08003aef 	.word	0x08003aef
 800391c:	08003aef 	.word	0x08003aef
 8003920:	08003aef 	.word	0x08003aef
 8003924:	080039a9 	.word	0x080039a9
 8003928:	08003aef 	.word	0x08003aef
 800392c:	08003aef 	.word	0x08003aef
 8003930:	08003aef 	.word	0x08003aef
 8003934:	080039eb 	.word	0x080039eb
 8003938:	08003aef 	.word	0x08003aef
 800393c:	08003aef 	.word	0x08003aef
 8003940:	08003aef 	.word	0x08003aef
 8003944:	08003a2b 	.word	0x08003a2b
 8003948:	08003aef 	.word	0x08003aef
 800394c:	08003aef 	.word	0x08003aef
 8003950:	08003aef 	.word	0x08003aef
 8003954:	08003a6d 	.word	0x08003a6d
 8003958:	08003aef 	.word	0x08003aef
 800395c:	08003aef 	.word	0x08003aef
 8003960:	08003aef 	.word	0x08003aef
 8003964:	08003aad 	.word	0x08003aad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa62 	bl	8003e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
      break;
 80039a6:	e0a5      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fad2 	bl	8003f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]
      break;
 80039e8:	e084      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fb3b 	bl	800406c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0208 	orr.w	r2, r2, #8
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	61da      	str	r2, [r3, #28]
      break;
 8003a28:	e064      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fba3 	bl	800417c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69d9      	ldr	r1, [r3, #28]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	61da      	str	r2, [r3, #28]
      break;
 8003a6a:	e043      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fbec 	bl	8004250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aaa:	e023      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fc30 	bl	8004318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aec:	e002      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
      break;
 8003af2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop

08003b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x1c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0b6      	b.n	8003c92 <HAL_TIM_ConfigClockSource+0x18a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b60:	d03e      	beq.n	8003be0 <HAL_TIM_ConfigClockSource+0xd8>
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b66:	f200 8087 	bhi.w	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6e:	f000 8086 	beq.w	8003c7e <HAL_TIM_ConfigClockSource+0x176>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b76:	d87f      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b78:	2b70      	cmp	r3, #112	@ 0x70
 8003b7a:	d01a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0xaa>
 8003b7c:	2b70      	cmp	r3, #112	@ 0x70
 8003b7e:	d87b      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b80:	2b60      	cmp	r3, #96	@ 0x60
 8003b82:	d050      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x11e>
 8003b84:	2b60      	cmp	r3, #96	@ 0x60
 8003b86:	d877      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b88:	2b50      	cmp	r3, #80	@ 0x50
 8003b8a:	d03c      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xfe>
 8003b8c:	2b50      	cmp	r3, #80	@ 0x50
 8003b8e:	d873      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d058      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x13e>
 8003b94:	2b40      	cmp	r3, #64	@ 0x40
 8003b96:	d86f      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003b98:	2b30      	cmp	r3, #48	@ 0x30
 8003b9a:	d064      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003b9c:	2b30      	cmp	r3, #48	@ 0x30
 8003b9e:	d86b      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d060      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d867      	bhi.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05c      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d05a      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x15e>
 8003bb0:	e062      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc2:	f000 fc89 	bl	80044d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	609a      	str	r2, [r3, #8]
      break;
 8003bde:	e04f      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf0:	f000 fc72 	bl	80044d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c02:	609a      	str	r2, [r3, #8]
      break;
 8003c04:	e03c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fbe6 	bl	80043e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2150      	movs	r1, #80	@ 0x50
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc3f 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e02c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fc05 	bl	8004442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2160      	movs	r1, #96	@ 0x60
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fc2f 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c44:	e01c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	461a      	mov	r2, r3
 8003c54:	f000 fbc6 	bl	80043e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fc1f 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c64:	e00c      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f000 fc16 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c76:	e003      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a46      	ldr	r2, [pc, #280]	@ (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0a:	d00f      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a43      	ldr	r2, [pc, #268]	@ (8003e1c <TIM_Base_SetConfig+0x130>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a42      	ldr	r2, [pc, #264]	@ (8003e20 <TIM_Base_SetConfig+0x134>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a41      	ldr	r2, [pc, #260]	@ (8003e24 <TIM_Base_SetConfig+0x138>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a40      	ldr	r2, [pc, #256]	@ (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d108      	bne.n	8003d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a35      	ldr	r2, [pc, #212]	@ (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4c:	d01b      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <TIM_Base_SetConfig+0x130>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d017      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a31      	ldr	r2, [pc, #196]	@ (8003e20 <TIM_Base_SetConfig+0x134>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a30      	ldr	r2, [pc, #192]	@ (8003e24 <TIM_Base_SetConfig+0x138>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00f      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2f      	ldr	r2, [pc, #188]	@ (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	@ (8003e2c <TIM_Base_SetConfig+0x140>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <TIM_Base_SetConfig+0x144>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <TIM_Base_SetConfig+0x148>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00f      	beq.n	8003de4 <TIM_Base_SetConfig+0xf8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <TIM_Base_SetConfig+0x140>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <TIM_Base_SetConfig+0x144>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0xf8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <TIM_Base_SetConfig+0x148>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f023 0201 	bic.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0302 	bic.w	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <TIM_OC1_SetConfig+0x10c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00f      	beq.n	8003eb8 <TIM_OC1_SetConfig+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <TIM_OC1_SetConfig+0x110>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_OC1_SetConfig+0x80>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <TIM_OC1_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_OC1_SetConfig+0x80>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a29      	ldr	r2, [pc, #164]	@ (8003f50 <TIM_OC1_SetConfig+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC1_SetConfig+0x80>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a28      	ldr	r2, [pc, #160]	@ (8003f54 <TIM_OC1_SetConfig+0x11c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10c      	bne.n	8003ed2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0308 	bic.w	r3, r3, #8
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <TIM_OC1_SetConfig+0x10c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_OC1_SetConfig+0xc2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <TIM_OC1_SetConfig+0x110>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_OC1_SetConfig+0xc2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <TIM_OC1_SetConfig+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_OC1_SetConfig+0xc2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a18      	ldr	r2, [pc, #96]	@ (8003f50 <TIM_OC1_SetConfig+0x118>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_OC1_SetConfig+0xc2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	@ (8003f54 <TIM_OC1_SetConfig+0x11c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f023 0210 	bic.w	r2, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0320 	bic.w	r3, r3, #32
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a28      	ldr	r2, [pc, #160]	@ (8004058 <TIM_OC2_SetConfig+0x100>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC2_SetConfig+0x6c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a27      	ldr	r2, [pc, #156]	@ (800405c <TIM_OC2_SetConfig+0x104>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10d      	bne.n	8003fe0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <TIM_OC2_SetConfig+0x100>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <TIM_OC2_SetConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <TIM_OC2_SetConfig+0x104>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_OC2_SetConfig+0xb0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <TIM_OC2_SetConfig+0x108>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_OC2_SetConfig+0xb0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8004064 <TIM_OC2_SetConfig+0x10c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_OC2_SetConfig+0xb0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <TIM_OC2_SetConfig+0x110>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d113      	bne.n	8004030 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800400e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40014000 	.word	0x40014000
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800

0800406c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a27      	ldr	r2, [pc, #156]	@ (8004168 <TIM_OC3_SetConfig+0xfc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC3_SetConfig+0x6a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a26      	ldr	r2, [pc, #152]	@ (800416c <TIM_OC3_SetConfig+0x100>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10d      	bne.n	80040f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <TIM_OC3_SetConfig+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_OC3_SetConfig+0xae>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <TIM_OC3_SetConfig+0x100>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_OC3_SetConfig+0xae>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1a      	ldr	r2, [pc, #104]	@ (8004170 <TIM_OC3_SetConfig+0x104>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_OC3_SetConfig+0xae>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <TIM_OC3_SetConfig+0x108>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_OC3_SetConfig+0xae>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a18      	ldr	r2, [pc, #96]	@ (8004178 <TIM_OC3_SetConfig+0x10c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d113      	bne.n	8004142 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40013400 	.word	0x40013400
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400
 8004178:	40014800 	.word	0x40014800

0800417c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	031b      	lsls	r3, r3, #12
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a18      	ldr	r2, [pc, #96]	@ (800423c <TIM_OC4_SetConfig+0xc0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00f      	beq.n	8004200 <TIM_OC4_SetConfig+0x84>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <TIM_OC4_SetConfig+0xc4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_OC4_SetConfig+0x84>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <TIM_OC4_SetConfig+0xc8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC4_SetConfig+0x84>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a15      	ldr	r2, [pc, #84]	@ (8004248 <TIM_OC4_SetConfig+0xcc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC4_SetConfig+0x84>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a14      	ldr	r2, [pc, #80]	@ (800424c <TIM_OC4_SetConfig+0xd0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d109      	bne.n	8004214 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <TIM_OC5_SetConfig+0xb4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <TIM_OC5_SetConfig+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a15      	ldr	r2, [pc, #84]	@ (800430c <TIM_OC5_SetConfig+0xbc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <TIM_OC5_SetConfig+0xc0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <TIM_OC5_SetConfig+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d109      	bne.n	80042de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40013400 	.word	0x40013400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800435e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	051b      	lsls	r3, r3, #20
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <TIM_OC6_SetConfig+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00f      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <TIM_OC6_SetConfig+0xbc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <TIM_OC6_SetConfig+0xc0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <TIM_OC6_SetConfig+0xc4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <TIM_OC6_SetConfig+0xc8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d109      	bne.n	80043a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800440e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f023 030a 	bic.w	r3, r3, #10
 8004420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 0210 	bic.w	r2, r3, #16
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800446c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800447e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	f043 0307 	orr.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e068      	b.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2e      	ldr	r2, [pc, #184]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2d      	ldr	r2, [pc, #180]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800456a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d018      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10c      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e065      	b.n	8004710 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a14      	ldr	r2, [pc, #80]	@ (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d115      	bne.n	80046fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	051b      	lsls	r3, r3, #20
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400

08004724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e042      	b.n	80047f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc f9a9 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	@ 0x24
 800478e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 ffde 	bl	800576c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fcdf 	bl	8005174 <UART_SetConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e01b      	b.n	80047f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 f85d 	bl	80058b0 <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	2b20      	cmp	r3, #32
 8004818:	d17b      	bne.n	8004912 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UART_Transmit+0x26>
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e074      	b.n	8004914 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483a:	f7fc fbcb 	bl	8000fd4 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d108      	bne.n	800486c <HAL_UART_Transmit+0x6c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e003      	b.n	8004874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004874:	e030      	b.n	80048d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f001 f8bf 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03d      	b.n	8004914 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048aa:	b292      	uxth	r2, r2
 80048ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3302      	adds	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e007      	b.n	80048c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1c8      	bne.n	8004876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2140      	movs	r1, #64	@ 0x40
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f001 f888 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	@ 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004932:	2b20      	cmp	r3, #32
 8004934:	f040 80b6 	bne.w	8004aa4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_UART_Receive+0x28>
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0ae      	b.n	8004aa6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2222      	movs	r2, #34	@ 0x22
 8004954:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495e:	f7fc fb39 	bl	8000fd4 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497c:	d10e      	bne.n	800499c <HAL_UART_Receive+0x80>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_UART_Receive+0x76>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800498c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004990:	e02d      	b.n	80049ee <HAL_UART_Receive+0xd2>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	22ff      	movs	r2, #255	@ 0xff
 8004996:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800499a:	e028      	b.n	80049ee <HAL_UART_Receive+0xd2>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10d      	bne.n	80049c0 <HAL_UART_Receive+0xa4>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_UART_Receive+0x9a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	22ff      	movs	r2, #255	@ 0xff
 80049b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049b4:	e01b      	b.n	80049ee <HAL_UART_Receive+0xd2>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	227f      	movs	r2, #127	@ 0x7f
 80049ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049be:	e016      	b.n	80049ee <HAL_UART_Receive+0xd2>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049c8:	d10d      	bne.n	80049e6 <HAL_UART_Receive+0xca>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <HAL_UART_Receive+0xc0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	227f      	movs	r2, #127	@ 0x7f
 80049d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049da:	e008      	b.n	80049ee <HAL_UART_Receive+0xd2>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	223f      	movs	r2, #63	@ 0x3f
 80049e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049e4:	e003      	b.n	80049ee <HAL_UART_Receive+0xd2>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80049f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d108      	bne.n	8004a12 <HAL_UART_Receive+0xf6>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e003      	b.n	8004a1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a1a:	e037      	b.n	8004a8c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	2120      	movs	r1, #32
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 ffec 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e033      	b.n	8004aa6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10c      	bne.n	8004a5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	8a7b      	ldrh	r3, [r7, #18]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e00d      	b.n	8004a7a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1c1      	bne.n	8004a1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ada:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ade:	4013      	ands	r3, r2
 8004ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11b      	bne.n	8004b24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8300 	beq.w	800511a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
      }
      return;
 8004b22:	e2fa      	b.n	800511a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8123 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b32:	4b8d      	ldr	r3, [pc, #564]	@ (8004d68 <HAL_UART_IRQHandler+0x2b8>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d6c <HAL_UART_IRQHandler+0x2bc>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8116 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <HAL_UART_IRQHandler+0xc8>
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xf8>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d011      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x128>
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8004d68 <HAL_UART_IRQHandler+0x2b8>)
 8004bf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <HAL_UART_IRQHandler+0x196>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8266 	beq.w	800511e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d013      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d054      	beq.n	8004d54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 ff17 	bl	8005ade <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d146      	bne.n	8004d4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d9      	bne.n	8004cbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d017      	beq.n	8004d44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1a:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <HAL_UART_IRQHandler+0x2c0>)
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fc fb9b 	bl	8001460 <HAL_DMA_Abort_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d019      	beq.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d42:	e00f      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9ff 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4a:	e00b      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9fb 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d52:	e007      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9f7 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004d62:	e1dc      	b.n	800511e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	bf00      	nop
    return;
 8004d66:	e1da      	b.n	800511e <HAL_UART_IRQHandler+0x66e>
 8004d68:	10000001 	.word	0x10000001
 8004d6c:	04000120 	.word	0x04000120
 8004d70:	08005bab 	.word	0x08005bab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 8170 	bne.w	800505e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8169 	beq.w	800505e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8162 	beq.w	800505e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	f040 80d8 	bne.w	8004f62 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80af 	beq.w	8004f28 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f080 80a7 	bcs.w	8004f28 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004de0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 8087 	bne.w	8004f06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1da      	bne.n	8004df8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e1      	bne.n	8004e42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e3      	bne.n	8004e7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e4      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fc fa51 	bl	80013a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f91b 	bl	800515c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004f26:	e0fc      	b.n	8005122 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f040 80f5 	bne.w	8005122 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	f040 80eb 	bne.w	8005122 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8fe 	bl	800515c <HAL_UARTEx_RxEventCallback>
      return;
 8004f60:	e0df      	b.n	8005122 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80d1 	beq.w	8005126 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80cc 	beq.w	8005126 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e4      	bne.n	8004f8e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e1      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	60fb      	str	r3, [r7, #12]
   return(result);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	617b      	str	r3, [r7, #20]
   return(result);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e4      	bne.n	8005014 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f880 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800505c:	e063      	b.n	8005126 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d8>
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800507e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fdd3 	bl	8005c2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005086:	e051      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d014      	beq.n	80050be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03a      	beq.n	800512a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    }
    return;
 80050bc:	e035      	b.n	800512a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_UART_IRQHandler+0x62e>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fd7d 	bl	8005bd6 <UART_EndTransmit_IT>
    return;
 80050dc:	e026      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_UART_IRQHandler+0x64e>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fdac 	bl	8005c54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fc:	e016      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_UART_IRQHandler+0x67c>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510e:	2b00      	cmp	r3, #0
 8005110:	da0c      	bge.n	800512c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fd94 	bl	8005c40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005118:	e008      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 800511a:	bf00      	nop
 800511c:	e006      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
    return;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
    return;
 800512a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800512c:	37e8      	adds	r7, #232	@ 0xe8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b08c      	sub	sp, #48	@ 0x30
 800517a:	af00      	add	r7, sp, #0
 800517c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4baa      	ldr	r3, [pc, #680]	@ (800544c <UART_SetConfig+0x2d8>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a9f      	ldr	r2, [pc, #636]	@ (8005450 <UART_SetConfig+0x2dc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051dc:	4313      	orrs	r3, r2
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	f023 010f 	bic.w	r1, r3, #15
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a90      	ldr	r2, [pc, #576]	@ (8005454 <UART_SetConfig+0x2e0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0xf0>
 8005218:	4b8f      	ldr	r3, [pc, #572]	@ (8005458 <UART_SetConfig+0x2e4>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d81a      	bhi.n	800525c <UART_SetConfig+0xe8>
 8005226:	a201      	add	r2, pc, #4	@ (adr r2, 800522c <UART_SetConfig+0xb8>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524d 	.word	0x0800524d
 8005234:	08005245 	.word	0x08005245
 8005238:	08005255 	.word	0x08005255
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e116      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e112      	b.n	8005472 <UART_SetConfig+0x2fe>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005252:	e10e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525a:	e10a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e106      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7c      	ldr	r2, [pc, #496]	@ (800545c <UART_SetConfig+0x2e8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d138      	bne.n	80052e0 <UART_SetConfig+0x16c>
 800526e:	4b7a      	ldr	r3, [pc, #488]	@ (8005458 <UART_SetConfig+0x2e4>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d82d      	bhi.n	80052d8 <UART_SetConfig+0x164>
 800527c:	a201      	add	r2, pc, #4	@ (adr r2, 8005284 <UART_SetConfig+0x110>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052d9 	.word	0x080052d9
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052d9 	.word	0x080052d9
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080052d9 	.word	0x080052d9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	080052c1 	.word	0x080052c1
 80052a8:	080052d9 	.word	0x080052d9
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052d1 	.word	0x080052d1
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052be:	e0d8      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052c0:	2302      	movs	r3, #2
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c6:	e0d4      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ce:	e0d0      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e0cc      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e0c8      	b.n	8005472 <UART_SetConfig+0x2fe>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005460 <UART_SetConfig+0x2ec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d125      	bne.n	8005336 <UART_SetConfig+0x1c2>
 80052ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005458 <UART_SetConfig+0x2e4>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052f4:	2b30      	cmp	r3, #48	@ 0x30
 80052f6:	d016      	beq.n	8005326 <UART_SetConfig+0x1b2>
 80052f8:	2b30      	cmp	r3, #48	@ 0x30
 80052fa:	d818      	bhi.n	800532e <UART_SetConfig+0x1ba>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d00a      	beq.n	8005316 <UART_SetConfig+0x1a2>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d814      	bhi.n	800532e <UART_SetConfig+0x1ba>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <UART_SetConfig+0x19a>
 8005308:	2b10      	cmp	r3, #16
 800530a:	d008      	beq.n	800531e <UART_SetConfig+0x1aa>
 800530c:	e00f      	b.n	800532e <UART_SetConfig+0x1ba>
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005314:	e0ad      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005316:	2302      	movs	r3, #2
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531c:	e0a9      	b.n	8005472 <UART_SetConfig+0x2fe>
 800531e:	2304      	movs	r3, #4
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005324:	e0a5      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005326:	2308      	movs	r3, #8
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532c:	e0a1      	b.n	8005472 <UART_SetConfig+0x2fe>
 800532e:	2310      	movs	r3, #16
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005334:	e09d      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a4a      	ldr	r2, [pc, #296]	@ (8005464 <UART_SetConfig+0x2f0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0x218>
 8005340:	4b45      	ldr	r3, [pc, #276]	@ (8005458 <UART_SetConfig+0x2e4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800534a:	2bc0      	cmp	r3, #192	@ 0xc0
 800534c:	d016      	beq.n	800537c <UART_SetConfig+0x208>
 800534e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005350:	d818      	bhi.n	8005384 <UART_SetConfig+0x210>
 8005352:	2b80      	cmp	r3, #128	@ 0x80
 8005354:	d00a      	beq.n	800536c <UART_SetConfig+0x1f8>
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d814      	bhi.n	8005384 <UART_SetConfig+0x210>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <UART_SetConfig+0x1f0>
 800535e:	2b40      	cmp	r3, #64	@ 0x40
 8005360:	d008      	beq.n	8005374 <UART_SetConfig+0x200>
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x210>
 8005364:	2300      	movs	r3, #0
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e082      	b.n	8005472 <UART_SetConfig+0x2fe>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e07e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e07a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e076      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e072      	b.n	8005472 <UART_SetConfig+0x2fe>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a35      	ldr	r2, [pc, #212]	@ (8005468 <UART_SetConfig+0x2f4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d12a      	bne.n	80053ec <UART_SetConfig+0x278>
 8005396:	4b30      	ldr	r3, [pc, #192]	@ (8005458 <UART_SetConfig+0x2e4>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a4:	d01a      	beq.n	80053dc <UART_SetConfig+0x268>
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053aa:	d81b      	bhi.n	80053e4 <UART_SetConfig+0x270>
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b0:	d00c      	beq.n	80053cc <UART_SetConfig+0x258>
 80053b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b6:	d815      	bhi.n	80053e4 <UART_SetConfig+0x270>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <UART_SetConfig+0x250>
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x260>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x270>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e052      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e04e      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e04a      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e046      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e042      	b.n	8005472 <UART_SetConfig+0x2fe>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <UART_SetConfig+0x2dc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d13a      	bne.n	800546c <UART_SetConfig+0x2f8>
 80053f6:	4b18      	ldr	r3, [pc, #96]	@ (8005458 <UART_SetConfig+0x2e4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005404:	d01a      	beq.n	800543c <UART_SetConfig+0x2c8>
 8005406:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800540a:	d81b      	bhi.n	8005444 <UART_SetConfig+0x2d0>
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005410:	d00c      	beq.n	800542c <UART_SetConfig+0x2b8>
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005416:	d815      	bhi.n	8005444 <UART_SetConfig+0x2d0>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <UART_SetConfig+0x2b0>
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005420:	d008      	beq.n	8005434 <UART_SetConfig+0x2c0>
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x2d0>
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542a:	e022      	b.n	8005472 <UART_SetConfig+0x2fe>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005432:	e01e      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543a:	e01a      	b.n	8005472 <UART_SetConfig+0x2fe>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005442:	e016      	b.n	8005472 <UART_SetConfig+0x2fe>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544a:	e012      	b.n	8005472 <UART_SetConfig+0x2fe>
 800544c:	cfff69f3 	.word	0xcfff69f3
 8005450:	40008000 	.word	0x40008000
 8005454:	40013800 	.word	0x40013800
 8005458:	40021000 	.word	0x40021000
 800545c:	40004400 	.word	0x40004400
 8005460:	40004800 	.word	0x40004800
 8005464:	40004c00 	.word	0x40004c00
 8005468:	40005000 	.word	0x40005000
 800546c:	2310      	movs	r3, #16
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4aae      	ldr	r2, [pc, #696]	@ (8005730 <UART_SetConfig+0x5bc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	f040 8097 	bne.w	80055ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005482:	2b08      	cmp	r3, #8
 8005484:	d823      	bhi.n	80054ce <UART_SetConfig+0x35a>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <UART_SetConfig+0x318>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054cf 	.word	0x080054cf
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054cf 	.word	0x080054cf
 800549c:	080054bf 	.word	0x080054bf
 80054a0:	080054cf 	.word	0x080054cf
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054cf 	.word	0x080054cf
 80054ac:	080054c7 	.word	0x080054c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fd f9e2 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054b6:	e010      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005734 <UART_SetConfig+0x5c0>)
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054bc:	e00d      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fd f943 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80054c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054c4:	e009      	b.n	80054da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054cc:	e005      	b.n	80054da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8130 	beq.w	8005742 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	4a94      	ldr	r2, [pc, #592]	@ (8005738 <UART_SetConfig+0x5c4>)
 80054e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	429a      	cmp	r2, r3
 8005504:	d305      	bcc.n	8005512 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005518:	e113      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	2200      	movs	r2, #0
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	4a84      	ldr	r2, [pc, #528]	@ (8005738 <UART_SetConfig+0x5c4>)
 8005528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552c:	b29b      	uxth	r3, r3
 800552e:	2200      	movs	r2, #0
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800553c:	f7fa feb0 	bl	80002a0 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	020b      	lsls	r3, r1, #8
 8005552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005556:	0202      	lsls	r2, r0, #8
 8005558:	6979      	ldr	r1, [r7, #20]
 800555a:	6849      	ldr	r1, [r1, #4]
 800555c:	0849      	lsrs	r1, r1, #1
 800555e:	2000      	movs	r0, #0
 8005560:	460c      	mov	r4, r1
 8005562:	4605      	mov	r5, r0
 8005564:	eb12 0804 	adds.w	r8, r2, r4
 8005568:	eb43 0905 	adc.w	r9, r3, r5
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	469a      	mov	sl, r3
 8005574:	4693      	mov	fp, r2
 8005576:	4652      	mov	r2, sl
 8005578:	465b      	mov	r3, fp
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fa fe8f 	bl	80002a0 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4613      	mov	r3, r2
 8005588:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005590:	d308      	bcc.n	80055a4 <UART_SetConfig+0x430>
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005598:	d204      	bcs.n	80055a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e0ce      	b.n	8005742 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055aa:	e0ca      	b.n	8005742 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b4:	d166      	bne.n	8005684 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d827      	bhi.n	800560e <UART_SetConfig+0x49a>
 80055be:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <UART_SetConfig+0x450>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fd f946 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ee:	e014      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fd f958 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80055f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055f6:	e010      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005734 <UART_SetConfig+0x5c0>)
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055fc:	e00d      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fd f8a3 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8005602:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8090 	beq.w	8005742 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	4a44      	ldr	r2, [pc, #272]	@ (8005738 <UART_SetConfig+0x5c4>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	fbb3 f3f2 	udiv	r3, r3, r2
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d916      	bls.n	800567c <UART_SetConfig+0x508>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d212      	bcs.n	800567c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f023 030f 	bic.w	r3, r3, #15
 800565e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	b29a      	uxth	r2, r3
 800566c:	8bfb      	ldrh	r3, [r7, #30]
 800566e:	4313      	orrs	r3, r2
 8005670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8bfa      	ldrh	r2, [r7, #30]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e062      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005682:	e05e      	b.n	8005742 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005684:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005688:	2b08      	cmp	r3, #8
 800568a:	d828      	bhi.n	80056de <UART_SetConfig+0x56a>
 800568c:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x520>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056df 	.word	0x080056df
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fd f8de 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80056bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056be:	e014      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fd f8f0 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <UART_SetConfig+0x5c0>)
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd f83b 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80056d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056e8:	bf00      	nop
    }

    if (pclk != 0U)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d028      	beq.n	8005742 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	4a10      	ldr	r2, [pc, #64]	@ (8005738 <UART_SetConfig+0x5c4>)
 80056f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056fa:	461a      	mov	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	441a      	add	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d910      	bls.n	800573c <UART_SetConfig+0x5c8>
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d20c      	bcs.n	800573c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	b29a      	uxth	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	e009      	b.n	8005742 <UART_SetConfig+0x5ce>
 800572e:	bf00      	nop
 8005730:	40008000 	.word	0x40008000
 8005734:	00f42400 	.word	0x00f42400
 8005738:	08006864 	.word	0x08006864
      }
      else
      {
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2201      	movs	r2, #1
 8005746:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2201      	movs	r2, #1
 800574e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800575e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005762:	4618      	mov	r0, r3
 8005764:	3730      	adds	r7, #48	@ 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800576c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01a      	beq.n	8005882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800586a:	d10a      	bne.n	8005882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b098      	sub	sp, #96	@ 0x60
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c0:	f7fb fb88 	bl	8000fd4 <HAL_GetTick>
 80058c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d12f      	bne.n	8005934 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f88e 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d022      	beq.n	8005934 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005902:	653b      	str	r3, [r7, #80]	@ 0x50
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800590c:	647b      	str	r3, [r7, #68]	@ 0x44
 800590e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800591a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e063      	b.n	80059fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d149      	bne.n	80059d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f857 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d03c      	beq.n	80059d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	623b      	str	r3, [r7, #32]
   return(result);
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30
 800597c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	60fb      	str	r3, [r7, #12]
   return(result);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ae:	61fa      	str	r2, [r7, #28]
 80059b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	617b      	str	r3, [r7, #20]
   return(result);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e012      	b.n	80059fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3758      	adds	r7, #88	@ 0x58
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a14:	e04f      	b.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d04b      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fb fad9 	bl	8000fd4 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e04e      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d037      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b80      	cmp	r3, #128	@ 0x80
 8005a4a:	d034      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d031      	beq.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d110      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2208      	movs	r2, #8
 8005a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f838 	bl	8005ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2208      	movs	r2, #8
 8005a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e029      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a90:	d111      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f81e 	bl	8005ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	2300      	movne	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d0a0      	beq.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b095      	sub	sp, #84	@ 0x54
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d118      	bne.n	8005b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b9e:	bf00      	nop
 8005ba0:	3754      	adds	r7, #84	@ 0x54
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fabd 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b088      	sub	sp, #32
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fa88 	bl	8005134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c24:	bf00      	nop
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_UARTEx_DisableFifoMode+0x16>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e027      	b.n	8005cce <HAL_UARTEx_DisableFifoMode+0x66>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2224      	movs	r2, #36	@ 0x24
 8005c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e02d      	b.n	8005d4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2224      	movs	r2, #36	@ 0x24
 8005cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f850 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e02d      	b.n	8005dca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2224      	movs	r2, #36	@ 0x24
 8005d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f812 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df4:	e031      	b.n	8005e5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df6:	2308      	movs	r3, #8
 8005df8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	0e5b      	lsrs	r3, r3, #25
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	0f5b      	lsrs	r3, r3, #29
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	7b3a      	ldrb	r2, [r7, #12]
 8005e22:	4911      	ldr	r1, [pc, #68]	@ (8005e68 <UARTEx_SetNbDataToProcess+0x94>)
 8005e24:	5c8a      	ldrb	r2, [r1, r2]
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e2a:	7b3a      	ldrb	r2, [r7, #12]
 8005e2c:	490f      	ldr	r1, [pc, #60]	@ (8005e6c <UARTEx_SetNbDataToProcess+0x98>)
 8005e2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	7b7a      	ldrb	r2, [r7, #13]
 8005e40:	4909      	ldr	r1, [pc, #36]	@ (8005e68 <UARTEx_SetNbDataToProcess+0x94>)
 8005e42:	5c8a      	ldrb	r2, [r1, r2]
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e48:	7b7a      	ldrb	r2, [r7, #13]
 8005e4a:	4908      	ldr	r1, [pc, #32]	@ (8005e6c <UARTEx_SetNbDataToProcess+0x98>)
 8005e4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	0800687c 	.word	0x0800687c
 8005e6c:	08006884 	.word	0x08006884

08005e70 <siprintf>:
 8005e70:	b40e      	push	{r1, r2, r3}
 8005e72:	b500      	push	{lr}
 8005e74:	b09c      	sub	sp, #112	@ 0x70
 8005e76:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e78:	9002      	str	r0, [sp, #8]
 8005e7a:	9006      	str	r0, [sp, #24]
 8005e7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e80:	4809      	ldr	r0, [pc, #36]	@ (8005ea8 <siprintf+0x38>)
 8005e82:	9107      	str	r1, [sp, #28]
 8005e84:	9104      	str	r1, [sp, #16]
 8005e86:	4909      	ldr	r1, [pc, #36]	@ (8005eac <siprintf+0x3c>)
 8005e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8c:	9105      	str	r1, [sp, #20]
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	a902      	add	r1, sp, #8
 8005e94:	f000 f994 	bl	80061c0 <_svfiprintf_r>
 8005e98:	9b02      	ldr	r3, [sp, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	b01c      	add	sp, #112	@ 0x70
 8005ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea4:	b003      	add	sp, #12
 8005ea6:	4770      	bx	lr
 8005ea8:	20000010 	.word	0x20000010
 8005eac:	ffff0208 	.word	0xffff0208

08005eb0 <memset>:
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	f803 1b01 	strb.w	r1, [r3], #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	@ (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000010 	.word	0x20000010

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	@ (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	@ (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	@ (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 fc66 	bl	80067b0 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	080068c8 	.word	0x080068c8
 8005f08:	080068c8 	.word	0x080068c8
 8005f0c:	080068c8 	.word	0x080068c8
 8005f10:	080068cc 	.word	0x080068cc

08005f14 <__retarget_lock_acquire_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_release_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <_free_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d041      	beq.n	8005fa4 <_free_r+0x8c>
 8005f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f24:	1f0c      	subs	r4, r1, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bfb8      	it	lt
 8005f2a:	18e4      	addlt	r4, r4, r3
 8005f2c:	f000 f8e0 	bl	80060f0 <__malloc_lock>
 8005f30:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <_free_r+0x90>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	b933      	cbnz	r3, 8005f44 <_free_r+0x2c>
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	6014      	str	r4, [r2, #0]
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f40:	f000 b8dc 	b.w	80060fc <__malloc_unlock>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d908      	bls.n	8005f5a <_free_r+0x42>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf01      	itttt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	1809      	addeq	r1, r1, r0
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	e7ed      	b.n	8005f36 <_free_r+0x1e>
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b10b      	cbz	r3, 8005f64 <_free_r+0x4c>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d9fa      	bls.n	8005f5a <_free_r+0x42>
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	1850      	adds	r0, r2, r1
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d10b      	bne.n	8005f84 <_free_r+0x6c>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	4401      	add	r1, r0
 8005f70:	1850      	adds	r0, r2, r1
 8005f72:	4283      	cmp	r3, r0
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	d1e0      	bne.n	8005f3a <_free_r+0x22>
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	4408      	add	r0, r1
 8005f80:	6010      	str	r0, [r2, #0]
 8005f82:	e7da      	b.n	8005f3a <_free_r+0x22>
 8005f84:	d902      	bls.n	8005f8c <_free_r+0x74>
 8005f86:	230c      	movs	r3, #12
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	e7d6      	b.n	8005f3a <_free_r+0x22>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	1821      	adds	r1, r4, r0
 8005f90:	428b      	cmp	r3, r1
 8005f92:	bf04      	itt	eq
 8005f94:	6819      	ldreq	r1, [r3, #0]
 8005f96:	685b      	ldreq	r3, [r3, #4]
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	bf04      	itt	eq
 8005f9c:	1809      	addeq	r1, r1, r0
 8005f9e:	6021      	streq	r1, [r4, #0]
 8005fa0:	6054      	str	r4, [r2, #4]
 8005fa2:	e7ca      	b.n	8005f3a <_free_r+0x22>
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000368 	.word	0x20000368

08005fac <sbrk_aligned>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0f      	ldr	r6, [pc, #60]	@ (8005fec <sbrk_aligned+0x40>)
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b911      	cbnz	r1, 8005fbe <sbrk_aligned+0x12>
 8005fb8:	f000 fba6 	bl	8006708 <_sbrk_r>
 8005fbc:	6030      	str	r0, [r6, #0]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 fba1 	bl	8006708 <_sbrk_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d103      	bne.n	8005fd2 <sbrk_aligned+0x26>
 8005fca:	f04f 34ff 	mov.w	r4, #4294967295
 8005fce:	4620      	mov	r0, r4
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	1cc4      	adds	r4, r0, #3
 8005fd4:	f024 0403 	bic.w	r4, r4, #3
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d0f8      	beq.n	8005fce <sbrk_aligned+0x22>
 8005fdc:	1a21      	subs	r1, r4, r0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fb92 	bl	8006708 <_sbrk_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1f2      	bne.n	8005fce <sbrk_aligned+0x22>
 8005fe8:	e7ef      	b.n	8005fca <sbrk_aligned+0x1e>
 8005fea:	bf00      	nop
 8005fec:	20000364 	.word	0x20000364

08005ff0 <_malloc_r>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	1ccd      	adds	r5, r1, #3
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	2d00      	cmp	r5, #0
 8006004:	4606      	mov	r6, r0
 8006006:	db01      	blt.n	800600c <_malloc_r+0x1c>
 8006008:	42a9      	cmp	r1, r5
 800600a:	d904      	bls.n	8006016 <_malloc_r+0x26>
 800600c:	230c      	movs	r3, #12
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	2000      	movs	r0, #0
 8006012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060ec <_malloc_r+0xfc>
 800601a:	f000 f869 	bl	80060f0 <__malloc_lock>
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	461c      	mov	r4, r3
 8006024:	bb44      	cbnz	r4, 8006078 <_malloc_r+0x88>
 8006026:	4629      	mov	r1, r5
 8006028:	4630      	mov	r0, r6
 800602a:	f7ff ffbf 	bl	8005fac <sbrk_aligned>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	4604      	mov	r4, r0
 8006032:	d158      	bne.n	80060e6 <_malloc_r+0xf6>
 8006034:	f8d8 4000 	ldr.w	r4, [r8]
 8006038:	4627      	mov	r7, r4
 800603a:	2f00      	cmp	r7, #0
 800603c:	d143      	bne.n	80060c6 <_malloc_r+0xd6>
 800603e:	2c00      	cmp	r4, #0
 8006040:	d04b      	beq.n	80060da <_malloc_r+0xea>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	4639      	mov	r1, r7
 8006046:	4630      	mov	r0, r6
 8006048:	eb04 0903 	add.w	r9, r4, r3
 800604c:	f000 fb5c 	bl	8006708 <_sbrk_r>
 8006050:	4581      	cmp	r9, r0
 8006052:	d142      	bne.n	80060da <_malloc_r+0xea>
 8006054:	6821      	ldr	r1, [r4, #0]
 8006056:	1a6d      	subs	r5, r5, r1
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff ffa6 	bl	8005fac <sbrk_aligned>
 8006060:	3001      	adds	r0, #1
 8006062:	d03a      	beq.n	80060da <_malloc_r+0xea>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	442b      	add	r3, r5
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	f8d8 3000 	ldr.w	r3, [r8]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	bb62      	cbnz	r2, 80060cc <_malloc_r+0xdc>
 8006072:	f8c8 7000 	str.w	r7, [r8]
 8006076:	e00f      	b.n	8006098 <_malloc_r+0xa8>
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	1b52      	subs	r2, r2, r5
 800607c:	d420      	bmi.n	80060c0 <_malloc_r+0xd0>
 800607e:	2a0b      	cmp	r2, #11
 8006080:	d917      	bls.n	80060b2 <_malloc_r+0xc2>
 8006082:	1961      	adds	r1, r4, r5
 8006084:	42a3      	cmp	r3, r4
 8006086:	6025      	str	r5, [r4, #0]
 8006088:	bf18      	it	ne
 800608a:	6059      	strne	r1, [r3, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	bf08      	it	eq
 8006090:	f8c8 1000 	streq.w	r1, [r8]
 8006094:	5162      	str	r2, [r4, r5]
 8006096:	604b      	str	r3, [r1, #4]
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f82f 	bl	80060fc <__malloc_unlock>
 800609e:	f104 000b 	add.w	r0, r4, #11
 80060a2:	1d23      	adds	r3, r4, #4
 80060a4:	f020 0007 	bic.w	r0, r0, #7
 80060a8:	1ac2      	subs	r2, r0, r3
 80060aa:	bf1c      	itt	ne
 80060ac:	1a1b      	subne	r3, r3, r0
 80060ae:	50a3      	strne	r3, [r4, r2]
 80060b0:	e7af      	b.n	8006012 <_malloc_r+0x22>
 80060b2:	6862      	ldr	r2, [r4, #4]
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	bf0c      	ite	eq
 80060b8:	f8c8 2000 	streq.w	r2, [r8]
 80060bc:	605a      	strne	r2, [r3, #4]
 80060be:	e7eb      	b.n	8006098 <_malloc_r+0xa8>
 80060c0:	4623      	mov	r3, r4
 80060c2:	6864      	ldr	r4, [r4, #4]
 80060c4:	e7ae      	b.n	8006024 <_malloc_r+0x34>
 80060c6:	463c      	mov	r4, r7
 80060c8:	687f      	ldr	r7, [r7, #4]
 80060ca:	e7b6      	b.n	800603a <_malloc_r+0x4a>
 80060cc:	461a      	mov	r2, r3
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d1fb      	bne.n	80060cc <_malloc_r+0xdc>
 80060d4:	2300      	movs	r3, #0
 80060d6:	6053      	str	r3, [r2, #4]
 80060d8:	e7de      	b.n	8006098 <_malloc_r+0xa8>
 80060da:	230c      	movs	r3, #12
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 f80c 	bl	80060fc <__malloc_unlock>
 80060e4:	e794      	b.n	8006010 <_malloc_r+0x20>
 80060e6:	6005      	str	r5, [r0, #0]
 80060e8:	e7d6      	b.n	8006098 <_malloc_r+0xa8>
 80060ea:	bf00      	nop
 80060ec:	20000368 	.word	0x20000368

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	@ (80060f8 <__malloc_lock+0x8>)
 80060f2:	f7ff bf0f 	b.w	8005f14 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	20000360 	.word	0x20000360

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	@ (8006104 <__malloc_unlock+0x8>)
 80060fe:	f7ff bf0a 	b.w	8005f16 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	20000360 	.word	0x20000360

08006108 <__ssputs_r>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	688e      	ldr	r6, [r1, #8]
 800610e:	461f      	mov	r7, r3
 8006110:	42be      	cmp	r6, r7
 8006112:	680b      	ldr	r3, [r1, #0]
 8006114:	4682      	mov	sl, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4690      	mov	r8, r2
 800611a:	d82d      	bhi.n	8006178 <__ssputs_r+0x70>
 800611c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006120:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006124:	d026      	beq.n	8006174 <__ssputs_r+0x6c>
 8006126:	6965      	ldr	r5, [r4, #20]
 8006128:	6909      	ldr	r1, [r1, #16]
 800612a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800612e:	eba3 0901 	sub.w	r9, r3, r1
 8006132:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006136:	1c7b      	adds	r3, r7, #1
 8006138:	444b      	add	r3, r9
 800613a:	106d      	asrs	r5, r5, #1
 800613c:	429d      	cmp	r5, r3
 800613e:	bf38      	it	cc
 8006140:	461d      	movcc	r5, r3
 8006142:	0553      	lsls	r3, r2, #21
 8006144:	d527      	bpl.n	8006196 <__ssputs_r+0x8e>
 8006146:	4629      	mov	r1, r5
 8006148:	f7ff ff52 	bl	8005ff0 <_malloc_r>
 800614c:	4606      	mov	r6, r0
 800614e:	b360      	cbz	r0, 80061aa <__ssputs_r+0xa2>
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	464a      	mov	r2, r9
 8006154:	f000 fae8 	bl	8006728 <memcpy>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800615e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	6126      	str	r6, [r4, #16]
 8006166:	6165      	str	r5, [r4, #20]
 8006168:	444e      	add	r6, r9
 800616a:	eba5 0509 	sub.w	r5, r5, r9
 800616e:	6026      	str	r6, [r4, #0]
 8006170:	60a5      	str	r5, [r4, #8]
 8006172:	463e      	mov	r6, r7
 8006174:	42be      	cmp	r6, r7
 8006176:	d900      	bls.n	800617a <__ssputs_r+0x72>
 8006178:	463e      	mov	r6, r7
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	4632      	mov	r2, r6
 800617e:	4641      	mov	r1, r8
 8006180:	f000 faa8 	bl	80066d4 <memmove>
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	1b9b      	subs	r3, r3, r6
 8006188:	60a3      	str	r3, [r4, #8]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4433      	add	r3, r6
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	2000      	movs	r0, #0
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	462a      	mov	r2, r5
 8006198:	f000 fad4 	bl	8006744 <_realloc_r>
 800619c:	4606      	mov	r6, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d1e0      	bne.n	8006164 <__ssputs_r+0x5c>
 80061a2:	6921      	ldr	r1, [r4, #16]
 80061a4:	4650      	mov	r0, sl
 80061a6:	f7ff feb7 	bl	8005f18 <_free_r>
 80061aa:	230c      	movs	r3, #12
 80061ac:	f8ca 3000 	str.w	r3, [sl]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	e7e9      	b.n	8006192 <__ssputs_r+0x8a>
	...

080061c0 <_svfiprintf_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4698      	mov	r8, r3
 80061c6:	898b      	ldrh	r3, [r1, #12]
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	b09d      	sub	sp, #116	@ 0x74
 80061cc:	4607      	mov	r7, r0
 80061ce:	460d      	mov	r5, r1
 80061d0:	4614      	mov	r4, r2
 80061d2:	d510      	bpl.n	80061f6 <_svfiprintf_r+0x36>
 80061d4:	690b      	ldr	r3, [r1, #16]
 80061d6:	b973      	cbnz	r3, 80061f6 <_svfiprintf_r+0x36>
 80061d8:	2140      	movs	r1, #64	@ 0x40
 80061da:	f7ff ff09 	bl	8005ff0 <_malloc_r>
 80061de:	6028      	str	r0, [r5, #0]
 80061e0:	6128      	str	r0, [r5, #16]
 80061e2:	b930      	cbnz	r0, 80061f2 <_svfiprintf_r+0x32>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	b01d      	add	sp, #116	@ 0x74
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	2340      	movs	r3, #64	@ 0x40
 80061f4:	616b      	str	r3, [r5, #20]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061fa:	2320      	movs	r3, #32
 80061fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006200:	f8cd 800c 	str.w	r8, [sp, #12]
 8006204:	2330      	movs	r3, #48	@ 0x30
 8006206:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063a4 <_svfiprintf_r+0x1e4>
 800620a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800620e:	f04f 0901 	mov.w	r9, #1
 8006212:	4623      	mov	r3, r4
 8006214:	469a      	mov	sl, r3
 8006216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800621a:	b10a      	cbz	r2, 8006220 <_svfiprintf_r+0x60>
 800621c:	2a25      	cmp	r2, #37	@ 0x25
 800621e:	d1f9      	bne.n	8006214 <_svfiprintf_r+0x54>
 8006220:	ebba 0b04 	subs.w	fp, sl, r4
 8006224:	d00b      	beq.n	800623e <_svfiprintf_r+0x7e>
 8006226:	465b      	mov	r3, fp
 8006228:	4622      	mov	r2, r4
 800622a:	4629      	mov	r1, r5
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff ff6b 	bl	8006108 <__ssputs_r>
 8006232:	3001      	adds	r0, #1
 8006234:	f000 80a7 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800623a:	445a      	add	r2, fp
 800623c:	9209      	str	r2, [sp, #36]	@ 0x24
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 809f 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006248:	2300      	movs	r3, #0
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006252:	f10a 0a01 	add.w	sl, sl, #1
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800625e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006260:	4654      	mov	r4, sl
 8006262:	2205      	movs	r2, #5
 8006264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006268:	484e      	ldr	r0, [pc, #312]	@ (80063a4 <_svfiprintf_r+0x1e4>)
 800626a:	f7f9 ffc9 	bl	8000200 <memchr>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	b9d8      	cbnz	r0, 80062aa <_svfiprintf_r+0xea>
 8006272:	06d0      	lsls	r0, r2, #27
 8006274:	bf44      	itt	mi
 8006276:	2320      	movmi	r3, #32
 8006278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800627c:	0711      	lsls	r1, r2, #28
 800627e:	bf44      	itt	mi
 8006280:	232b      	movmi	r3, #43	@ 0x2b
 8006282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006286:	f89a 3000 	ldrb.w	r3, [sl]
 800628a:	2b2a      	cmp	r3, #42	@ 0x2a
 800628c:	d015      	beq.n	80062ba <_svfiprintf_r+0xfa>
 800628e:	9a07      	ldr	r2, [sp, #28]
 8006290:	4654      	mov	r4, sl
 8006292:	2000      	movs	r0, #0
 8006294:	f04f 0c0a 	mov.w	ip, #10
 8006298:	4621      	mov	r1, r4
 800629a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629e:	3b30      	subs	r3, #48	@ 0x30
 80062a0:	2b09      	cmp	r3, #9
 80062a2:	d94b      	bls.n	800633c <_svfiprintf_r+0x17c>
 80062a4:	b1b0      	cbz	r0, 80062d4 <_svfiprintf_r+0x114>
 80062a6:	9207      	str	r2, [sp, #28]
 80062a8:	e014      	b.n	80062d4 <_svfiprintf_r+0x114>
 80062aa:	eba0 0308 	sub.w	r3, r0, r8
 80062ae:	fa09 f303 	lsl.w	r3, r9, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	46a2      	mov	sl, r4
 80062b8:	e7d2      	b.n	8006260 <_svfiprintf_r+0xa0>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	9103      	str	r1, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfbb      	ittet	lt
 80062c6:	425b      	neglt	r3, r3
 80062c8:	f042 0202 	orrlt.w	r2, r2, #2
 80062cc:	9307      	strge	r3, [sp, #28]
 80062ce:	9307      	strlt	r3, [sp, #28]
 80062d0:	bfb8      	it	lt
 80062d2:	9204      	strlt	r2, [sp, #16]
 80062d4:	7823      	ldrb	r3, [r4, #0]
 80062d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d8:	d10a      	bne.n	80062f0 <_svfiprintf_r+0x130>
 80062da:	7863      	ldrb	r3, [r4, #1]
 80062dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062de:	d132      	bne.n	8006346 <_svfiprintf_r+0x186>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	9203      	str	r2, [sp, #12]
 80062e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062ec:	3402      	adds	r4, #2
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063b4 <_svfiprintf_r+0x1f4>
 80062f4:	7821      	ldrb	r1, [r4, #0]
 80062f6:	2203      	movs	r2, #3
 80062f8:	4650      	mov	r0, sl
 80062fa:	f7f9 ff81 	bl	8000200 <memchr>
 80062fe:	b138      	cbz	r0, 8006310 <_svfiprintf_r+0x150>
 8006300:	9b04      	ldr	r3, [sp, #16]
 8006302:	eba0 000a 	sub.w	r0, r0, sl
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	4082      	lsls	r2, r0
 800630a:	4313      	orrs	r3, r2
 800630c:	3401      	adds	r4, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	4824      	ldr	r0, [pc, #144]	@ (80063a8 <_svfiprintf_r+0x1e8>)
 8006316:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800631a:	2206      	movs	r2, #6
 800631c:	f7f9 ff70 	bl	8000200 <memchr>
 8006320:	2800      	cmp	r0, #0
 8006322:	d036      	beq.n	8006392 <_svfiprintf_r+0x1d2>
 8006324:	4b21      	ldr	r3, [pc, #132]	@ (80063ac <_svfiprintf_r+0x1ec>)
 8006326:	bb1b      	cbnz	r3, 8006370 <_svfiprintf_r+0x1b0>
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	3307      	adds	r3, #7
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	3308      	adds	r3, #8
 8006332:	9303      	str	r3, [sp, #12]
 8006334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006336:	4433      	add	r3, r6
 8006338:	9309      	str	r3, [sp, #36]	@ 0x24
 800633a:	e76a      	b.n	8006212 <_svfiprintf_r+0x52>
 800633c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006340:	460c      	mov	r4, r1
 8006342:	2001      	movs	r0, #1
 8006344:	e7a8      	b.n	8006298 <_svfiprintf_r+0xd8>
 8006346:	2300      	movs	r3, #0
 8006348:	3401      	adds	r4, #1
 800634a:	9305      	str	r3, [sp, #20]
 800634c:	4619      	mov	r1, r3
 800634e:	f04f 0c0a 	mov.w	ip, #10
 8006352:	4620      	mov	r0, r4
 8006354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006358:	3a30      	subs	r2, #48	@ 0x30
 800635a:	2a09      	cmp	r2, #9
 800635c:	d903      	bls.n	8006366 <_svfiprintf_r+0x1a6>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c6      	beq.n	80062f0 <_svfiprintf_r+0x130>
 8006362:	9105      	str	r1, [sp, #20]
 8006364:	e7c4      	b.n	80062f0 <_svfiprintf_r+0x130>
 8006366:	fb0c 2101 	mla	r1, ip, r1, r2
 800636a:	4604      	mov	r4, r0
 800636c:	2301      	movs	r3, #1
 800636e:	e7f0      	b.n	8006352 <_svfiprintf_r+0x192>
 8006370:	ab03      	add	r3, sp, #12
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	462a      	mov	r2, r5
 8006376:	4b0e      	ldr	r3, [pc, #56]	@ (80063b0 <_svfiprintf_r+0x1f0>)
 8006378:	a904      	add	r1, sp, #16
 800637a:	4638      	mov	r0, r7
 800637c:	f3af 8000 	nop.w
 8006380:	1c42      	adds	r2, r0, #1
 8006382:	4606      	mov	r6, r0
 8006384:	d1d6      	bne.n	8006334 <_svfiprintf_r+0x174>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	065b      	lsls	r3, r3, #25
 800638a:	f53f af2d 	bmi.w	80061e8 <_svfiprintf_r+0x28>
 800638e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006390:	e72c      	b.n	80061ec <_svfiprintf_r+0x2c>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4b05      	ldr	r3, [pc, #20]	@ (80063b0 <_svfiprintf_r+0x1f0>)
 800639a:	a904      	add	r1, sp, #16
 800639c:	4638      	mov	r0, r7
 800639e:	f000 f879 	bl	8006494 <_printf_i>
 80063a2:	e7ed      	b.n	8006380 <_svfiprintf_r+0x1c0>
 80063a4:	0800688c 	.word	0x0800688c
 80063a8:	08006896 	.word	0x08006896
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006109 	.word	0x08006109
 80063b4:	08006892 	.word	0x08006892

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4698      	mov	r8, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bfb8      	it	lt
 80063cc:	4613      	movlt	r3, r2
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063d4:	4607      	mov	r7, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc26      	bgt.n	800644e <_printf_common+0x96>
 8006400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	3b00      	subs	r3, #0
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d42b      	bmi.n	8006468 <_printf_common+0xb0>
 8006410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006414:	4641      	mov	r1, r8
 8006416:	4638      	mov	r0, r7
 8006418:	47c8      	blx	r9
 800641a:	3001      	adds	r0, #1
 800641c:	d01e      	beq.n	800645c <_printf_common+0xa4>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	f003 0306 	and.w	r3, r3, #6
 8006426:	2b04      	cmp	r3, #4
 8006428:	bf02      	ittt	eq
 800642a:	68e5      	ldreq	r5, [r4, #12]
 800642c:	6833      	ldreq	r3, [r6, #0]
 800642e:	1aed      	subeq	r5, r5, r3
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	bf0c      	ite	eq
 8006434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006438:	2500      	movne	r5, #0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfc4      	itt	gt
 800643e:	1a9b      	subgt	r3, r3, r2
 8006440:	18ed      	addgt	r5, r5, r3
 8006442:	2600      	movs	r6, #0
 8006444:	341a      	adds	r4, #26
 8006446:	42b5      	cmp	r5, r6
 8006448:	d11a      	bne.n	8006480 <_printf_common+0xc8>
 800644a:	2000      	movs	r0, #0
 800644c:	e008      	b.n	8006460 <_printf_common+0xa8>
 800644e:	2301      	movs	r3, #1
 8006450:	4652      	mov	r2, sl
 8006452:	4641      	mov	r1, r8
 8006454:	4638      	mov	r0, r7
 8006456:	47c8      	blx	r9
 8006458:	3001      	adds	r0, #1
 800645a:	d103      	bne.n	8006464 <_printf_common+0xac>
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	3501      	adds	r5, #1
 8006466:	e7c6      	b.n	80063f6 <_printf_common+0x3e>
 8006468:	18e1      	adds	r1, r4, r3
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	2030      	movs	r0, #48	@ 0x30
 800646e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006472:	4422      	add	r2, r4
 8006474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800647c:	3302      	adds	r3, #2
 800647e:	e7c7      	b.n	8006410 <_printf_common+0x58>
 8006480:	2301      	movs	r3, #1
 8006482:	4622      	mov	r2, r4
 8006484:	4641      	mov	r1, r8
 8006486:	4638      	mov	r0, r7
 8006488:	47c8      	blx	r9
 800648a:	3001      	adds	r0, #1
 800648c:	d0e6      	beq.n	800645c <_printf_common+0xa4>
 800648e:	3601      	adds	r6, #1
 8006490:	e7d9      	b.n	8006446 <_printf_common+0x8e>
	...

08006494 <_printf_i>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	7e0f      	ldrb	r7, [r1, #24]
 800649a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800649c:	2f78      	cmp	r7, #120	@ 0x78
 800649e:	4691      	mov	r9, r2
 80064a0:	4680      	mov	r8, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	469a      	mov	sl, r3
 80064a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064aa:	d807      	bhi.n	80064bc <_printf_i+0x28>
 80064ac:	2f62      	cmp	r7, #98	@ 0x62
 80064ae:	d80a      	bhi.n	80064c6 <_printf_i+0x32>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f000 80d2 	beq.w	800665a <_printf_i+0x1c6>
 80064b6:	2f58      	cmp	r7, #88	@ 0x58
 80064b8:	f000 80b9 	beq.w	800662e <_printf_i+0x19a>
 80064bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064c4:	e03a      	b.n	800653c <_printf_i+0xa8>
 80064c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064ca:	2b15      	cmp	r3, #21
 80064cc:	d8f6      	bhi.n	80064bc <_printf_i+0x28>
 80064ce:	a101      	add	r1, pc, #4	@ (adr r1, 80064d4 <_printf_i+0x40>)
 80064d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	08006541 	.word	0x08006541
 80064dc:	080064bd 	.word	0x080064bd
 80064e0:	080064bd 	.word	0x080064bd
 80064e4:	080064bd 	.word	0x080064bd
 80064e8:	080064bd 	.word	0x080064bd
 80064ec:	08006541 	.word	0x08006541
 80064f0:	080064bd 	.word	0x080064bd
 80064f4:	080064bd 	.word	0x080064bd
 80064f8:	080064bd 	.word	0x080064bd
 80064fc:	080064bd 	.word	0x080064bd
 8006500:	08006641 	.word	0x08006641
 8006504:	0800656b 	.word	0x0800656b
 8006508:	080065fb 	.word	0x080065fb
 800650c:	080064bd 	.word	0x080064bd
 8006510:	080064bd 	.word	0x080064bd
 8006514:	08006663 	.word	0x08006663
 8006518:	080064bd 	.word	0x080064bd
 800651c:	0800656b 	.word	0x0800656b
 8006520:	080064bd 	.word	0x080064bd
 8006524:	080064bd 	.word	0x080064bd
 8006528:	08006603 	.word	0x08006603
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6032      	str	r2, [r6, #0]
 8006534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800653c:	2301      	movs	r3, #1
 800653e:	e09d      	b.n	800667c <_printf_i+0x1e8>
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	6031      	str	r1, [r6, #0]
 8006548:	0606      	lsls	r6, r0, #24
 800654a:	d501      	bpl.n	8006550 <_printf_i+0xbc>
 800654c:	681d      	ldr	r5, [r3, #0]
 800654e:	e003      	b.n	8006558 <_printf_i+0xc4>
 8006550:	0645      	lsls	r5, r0, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0xb8>
 8006554:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006558:	2d00      	cmp	r5, #0
 800655a:	da03      	bge.n	8006564 <_printf_i+0xd0>
 800655c:	232d      	movs	r3, #45	@ 0x2d
 800655e:	426d      	negs	r5, r5
 8006560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006564:	4859      	ldr	r0, [pc, #356]	@ (80066cc <_printf_i+0x238>)
 8006566:	230a      	movs	r3, #10
 8006568:	e011      	b.n	800658e <_printf_i+0xfa>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	0608      	lsls	r0, r1, #24
 8006570:	f853 5b04 	ldr.w	r5, [r3], #4
 8006574:	d402      	bmi.n	800657c <_printf_i+0xe8>
 8006576:	0649      	lsls	r1, r1, #25
 8006578:	bf48      	it	mi
 800657a:	b2ad      	uxthmi	r5, r5
 800657c:	2f6f      	cmp	r7, #111	@ 0x6f
 800657e:	4853      	ldr	r0, [pc, #332]	@ (80066cc <_printf_i+0x238>)
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	bf14      	ite	ne
 8006584:	230a      	movne	r3, #10
 8006586:	2308      	moveq	r3, #8
 8006588:	2100      	movs	r1, #0
 800658a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800658e:	6866      	ldr	r6, [r4, #4]
 8006590:	60a6      	str	r6, [r4, #8]
 8006592:	2e00      	cmp	r6, #0
 8006594:	bfa2      	ittt	ge
 8006596:	6821      	ldrge	r1, [r4, #0]
 8006598:	f021 0104 	bicge.w	r1, r1, #4
 800659c:	6021      	strge	r1, [r4, #0]
 800659e:	b90d      	cbnz	r5, 80065a4 <_printf_i+0x110>
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	d04b      	beq.n	800663c <_printf_i+0x1a8>
 80065a4:	4616      	mov	r6, r2
 80065a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80065aa:	fb03 5711 	mls	r7, r3, r1, r5
 80065ae:	5dc7      	ldrb	r7, [r0, r7]
 80065b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065b4:	462f      	mov	r7, r5
 80065b6:	42bb      	cmp	r3, r7
 80065b8:	460d      	mov	r5, r1
 80065ba:	d9f4      	bls.n	80065a6 <_printf_i+0x112>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10b      	bne.n	80065d8 <_printf_i+0x144>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07df      	lsls	r7, r3, #31
 80065c4:	d508      	bpl.n	80065d8 <_printf_i+0x144>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	4299      	cmp	r1, r3
 80065cc:	bfde      	ittt	le
 80065ce:	2330      	movle	r3, #48	@ 0x30
 80065d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065d8:	1b92      	subs	r2, r2, r6
 80065da:	6122      	str	r2, [r4, #16]
 80065dc:	f8cd a000 	str.w	sl, [sp]
 80065e0:	464b      	mov	r3, r9
 80065e2:	aa03      	add	r2, sp, #12
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fee6 	bl	80063b8 <_printf_common>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d14a      	bne.n	8006686 <_printf_i+0x1f2>
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	b004      	add	sp, #16
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	4833      	ldr	r0, [pc, #204]	@ (80066d0 <_printf_i+0x23c>)
 8006604:	2778      	movs	r7, #120	@ 0x78
 8006606:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	6831      	ldr	r1, [r6, #0]
 800660e:	061f      	lsls	r7, r3, #24
 8006610:	f851 5b04 	ldr.w	r5, [r1], #4
 8006614:	d402      	bmi.n	800661c <_printf_i+0x188>
 8006616:	065f      	lsls	r7, r3, #25
 8006618:	bf48      	it	mi
 800661a:	b2ad      	uxthmi	r5, r5
 800661c:	6031      	str	r1, [r6, #0]
 800661e:	07d9      	lsls	r1, r3, #31
 8006620:	bf44      	itt	mi
 8006622:	f043 0320 	orrmi.w	r3, r3, #32
 8006626:	6023      	strmi	r3, [r4, #0]
 8006628:	b11d      	cbz	r5, 8006632 <_printf_i+0x19e>
 800662a:	2310      	movs	r3, #16
 800662c:	e7ac      	b.n	8006588 <_printf_i+0xf4>
 800662e:	4827      	ldr	r0, [pc, #156]	@ (80066cc <_printf_i+0x238>)
 8006630:	e7e9      	b.n	8006606 <_printf_i+0x172>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f023 0320 	bic.w	r3, r3, #32
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	e7f6      	b.n	800662a <_printf_i+0x196>
 800663c:	4616      	mov	r6, r2
 800663e:	e7bd      	b.n	80065bc <_printf_i+0x128>
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	6961      	ldr	r1, [r4, #20]
 8006646:	1d18      	adds	r0, r3, #4
 8006648:	6030      	str	r0, [r6, #0]
 800664a:	062e      	lsls	r6, r5, #24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	d501      	bpl.n	8006654 <_printf_i+0x1c0>
 8006650:	6019      	str	r1, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0x1c6>
 8006654:	0668      	lsls	r0, r5, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0x1bc>
 8006658:	8019      	strh	r1, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	4616      	mov	r6, r2
 8006660:	e7bc      	b.n	80065dc <_printf_i+0x148>
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	6032      	str	r2, [r6, #0]
 8006668:	681e      	ldr	r6, [r3, #0]
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	2100      	movs	r1, #0
 800666e:	4630      	mov	r0, r6
 8006670:	f7f9 fdc6 	bl	8000200 <memchr>
 8006674:	b108      	cbz	r0, 800667a <_printf_i+0x1e6>
 8006676:	1b80      	subs	r0, r0, r6
 8006678:	6060      	str	r0, [r4, #4]
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	2300      	movs	r3, #0
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006684:	e7aa      	b.n	80065dc <_printf_i+0x148>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	4632      	mov	r2, r6
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d0ad      	beq.n	80065f0 <_printf_i+0x15c>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d413      	bmi.n	80066c2 <_printf_i+0x22e>
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	4298      	cmp	r0, r3
 80066a0:	bfb8      	it	lt
 80066a2:	4618      	movlt	r0, r3
 80066a4:	e7a6      	b.n	80065f4 <_printf_i+0x160>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4632      	mov	r2, r6
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	47d0      	blx	sl
 80066b0:	3001      	adds	r0, #1
 80066b2:	d09d      	beq.n	80065f0 <_printf_i+0x15c>
 80066b4:	3501      	adds	r5, #1
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	9903      	ldr	r1, [sp, #12]
 80066ba:	1a5b      	subs	r3, r3, r1
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dcf2      	bgt.n	80066a6 <_printf_i+0x212>
 80066c0:	e7eb      	b.n	800669a <_printf_i+0x206>
 80066c2:	2500      	movs	r5, #0
 80066c4:	f104 0619 	add.w	r6, r4, #25
 80066c8:	e7f5      	b.n	80066b6 <_printf_i+0x222>
 80066ca:	bf00      	nop
 80066cc:	0800689d 	.word	0x0800689d
 80066d0:	080068ae 	.word	0x080068ae

080066d4 <memmove>:
 80066d4:	4288      	cmp	r0, r1
 80066d6:	b510      	push	{r4, lr}
 80066d8:	eb01 0402 	add.w	r4, r1, r2
 80066dc:	d902      	bls.n	80066e4 <memmove+0x10>
 80066de:	4284      	cmp	r4, r0
 80066e0:	4623      	mov	r3, r4
 80066e2:	d807      	bhi.n	80066f4 <memmove+0x20>
 80066e4:	1e43      	subs	r3, r0, #1
 80066e6:	42a1      	cmp	r1, r4
 80066e8:	d008      	beq.n	80066fc <memmove+0x28>
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f2:	e7f8      	b.n	80066e6 <memmove+0x12>
 80066f4:	4402      	add	r2, r0
 80066f6:	4601      	mov	r1, r0
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d100      	bne.n	80066fe <memmove+0x2a>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006706:	e7f7      	b.n	80066f8 <memmove+0x24>

08006708 <_sbrk_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d06      	ldr	r5, [pc, #24]	@ (8006724 <_sbrk_r+0x1c>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	f7fa fb64 	bl	8000de0 <_sbrk>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_sbrk_r+0x1a>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_sbrk_r+0x1a>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	2000035c 	.word	0x2000035c

08006728 <memcpy>:
 8006728:	440a      	add	r2, r1
 800672a:	4291      	cmp	r1, r2
 800672c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	4770      	bx	lr
 8006734:	b510      	push	{r4, lr}
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673e:	4291      	cmp	r1, r2
 8006740:	d1f9      	bne.n	8006736 <memcpy+0xe>
 8006742:	bd10      	pop	{r4, pc}

08006744 <_realloc_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4680      	mov	r8, r0
 800674a:	4615      	mov	r5, r2
 800674c:	460c      	mov	r4, r1
 800674e:	b921      	cbnz	r1, 800675a <_realloc_r+0x16>
 8006750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4611      	mov	r1, r2
 8006756:	f7ff bc4b 	b.w	8005ff0 <_malloc_r>
 800675a:	b92a      	cbnz	r2, 8006768 <_realloc_r+0x24>
 800675c:	f7ff fbdc 	bl	8005f18 <_free_r>
 8006760:	2400      	movs	r4, #0
 8006762:	4620      	mov	r0, r4
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	f000 f81a 	bl	80067a0 <_malloc_usable_size_r>
 800676c:	4285      	cmp	r5, r0
 800676e:	4606      	mov	r6, r0
 8006770:	d802      	bhi.n	8006778 <_realloc_r+0x34>
 8006772:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006776:	d8f4      	bhi.n	8006762 <_realloc_r+0x1e>
 8006778:	4629      	mov	r1, r5
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fc38 	bl	8005ff0 <_malloc_r>
 8006780:	4607      	mov	r7, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ec      	beq.n	8006760 <_realloc_r+0x1c>
 8006786:	42b5      	cmp	r5, r6
 8006788:	462a      	mov	r2, r5
 800678a:	4621      	mov	r1, r4
 800678c:	bf28      	it	cs
 800678e:	4632      	movcs	r2, r6
 8006790:	f7ff ffca 	bl	8006728 <memcpy>
 8006794:	4621      	mov	r1, r4
 8006796:	4640      	mov	r0, r8
 8006798:	f7ff fbbe 	bl	8005f18 <_free_r>
 800679c:	463c      	mov	r4, r7
 800679e:	e7e0      	b.n	8006762 <_realloc_r+0x1e>

080067a0 <_malloc_usable_size_r>:
 80067a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a4:	1f18      	subs	r0, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfbc      	itt	lt
 80067aa:	580b      	ldrlt	r3, [r1, r0]
 80067ac:	18c0      	addlt	r0, r0, r3
 80067ae:	4770      	bx	lr

080067b0 <_init>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr

080067bc <_fini>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	bf00      	nop
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr
